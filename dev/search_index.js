var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Crystalline","category":"page"},{"location":"api/#Exported-types","page":"API","title":"Exported types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Crystalline]\nPrivate = false\nOrder   = [:types]","category":"page"},{"location":"api/#Exported-methods","page":"API","title":"Exported methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Crystalline]\nPrivate = false\nOrder   = [:function]","category":"page"},{"location":"api/#Crystalline.bandreps","page":"API","title":"Crystalline.bandreps","text":"bandreps(sgnum::Integer, D::Integer=3; \n         allpaths::Bool=false, spinful::Bool=false, timereversal::Bool=true)\n\nReturns the BandRepSet for space group sgnum (provided by the Bilbao Crystallographic Server) and dimension D.\n\nKeyword arguments:\n\nallpaths: include a minimal sufficient set (false, default) or all (true) k-vectors. \nspinful: single- (false, default) or double-valued (true) irreps, as appropriate for            spinless and spinful particles, respectively.\ntimereversal: assume presence (true, default) or absence (false) of time-reversal                 symmetry.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.basisdim-Tuple{BandRepSet}","page":"API","title":"Crystalline.basisdim","text":"basisdim(BRS::BandRepSet) --> Int64\n\nComputes the dimension of the (linearly independent parts) of a band representation set. This is d^textbs = d^textai in the notation of Po, Watanabe, & Vishwanath, Nature Commun. 8, 50 (2017). In other words, this is the number of linearly independent basis vectors that span the expansions of a band structure or atomic insulator viewed as symmetry-data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.calcfourier-Tuple{Any,Crystalline.AbstractFourierLattice}","page":"API","title":"Crystalline.calcfourier","text":"calcfourier(xyz, flat::AbstractFourierLattice) --> Float64\n\nCompute the real part of the function evaluation of flat at a point xyz (a tuple, SVector, or a vector), i.e. return     Re[∑ᵢ cᵢexp(2πi𝐆ᵢ⋅𝐫)] with 𝐆ᵢ denoting a 𝐆-vector in an allowed orbit in flat, and  cᵢ an associated coefficient (and with 𝐫 ≡ xyz).\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.cartesianize-Union{Tuple{D}, Tuple{SymOperation{D},DirectBasis{D}}} where D","page":"API","title":"Crystalline.cartesianize","text":"cartesianize(op::SymOperation{D}, Rs::DirectBasis{D}) --> SymOperation{D}\n\nConverts opˡ from a lattice basis to a Cartesian basis, by computing the transformed operators opᶜ = 𝐑*opˡ*𝐑⁻¹ via the Cartesian basis matrix 𝐑 (whose columns are the DirectBasis vectors Rs[i]). \n\nNote 1\n\nThe matrix 𝐑 maps vectors coefficients in a lattice basis 𝐯ˡ to coefficients in a Cartesian basis 𝐯ᶜ as 𝐯ˡ = 𝐑⁻¹𝐯ᶜ and vice versa as 𝐯ᶜ = 𝐑𝐯ˡ. Since a general transformation P  transforms an \"original\" vectors with coefficients 𝐯 to new coefficients 𝐯′ via 𝐯′ = P⁻¹𝐯 and since we here here consider the lattice basis as the \"original\" basis we have P = 𝐑⁻¹.  As such, the transformation of the operator op transforms as opᶜ = P⁻¹*opˡ*P, i.e. opᶜ = transform(opˡ,P) = transform(opˡ,𝐑⁻¹).\n\nNote 2\n\nThe display (e.g. Seitz and xyzt notation) of SymOperations e.g. in the REPL implicitly assumes integer coefficients for its point-group matrix: as a consequence, displaying  SymOperations in a Cartesian basis may produce undefined behavior. The matrix representation remains valid, however.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.centering","page":"API","title":"Crystalline.centering","text":"centering(sg::SpaceGroup) --> Char\ncentering(sgnum::Integer, D::Integer=3) --> Char\n\nDetermines the conventional centering type of a given space/plane group sg (alternatively specified by its conventional number sgnum and dimensionality D by comparison with the Hermann-Mauguin notation's first letter. \n\nPossible output values, depending on dimensionality D, are (see ITA Sec. 9.1.4):\n\nD=2 ┌ 'p': no centring (primitive)\n    └ 'c': face centered\n\nD=3 ┌ 'P': no centring (primitive)\n    ├ 'I': body centred (innenzentriert)\n    ├ 'F': all-face centred\n    ├ 'A', 'B', 'C': one-face centred, (b,c) or (c,a) or (a,b)\n    └ 'R': hexagonal cell rhombohedrally centred\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.classification-Tuple{BandRepSet}","page":"API","title":"Crystalline.classification","text":"classification(BRS::BandRepSet) --> String\n\nCalculate the symmetry indicator classification of a band representation set, meaning the  index-classification inferrable on the basis of symmetry alone.\n\nTechnically, the calculation answers a question like \"what direct product of  mathbbZ_n groups is the the quotient group X^textbs = textBStextAI isomorphic to?\".\n\nSee e.g. Po, Watanabe, & Vishwanath, Nature Commun. 8, 50 (2017) for more information.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.conventionalize-Union{Tuple{D}, Tuple{Crystalline.AbstractFourierLattice{D},Char}} where D","page":"API","title":"Crystalline.conventionalize","text":"conventionalize(flat′::AbstractFourierLattice, cntr::Char) --> ::typeof(flat′)\n\nGiven flat′ referred to a primitive basis with centering cntr, compute the derived (but physically equivalent) lattice flat referred to the associated conventional basis. \n\nSee also the complementary methods transform(::AbstractFourierLattice, ::AbstractMatrix{<:Real} and primitivize(::AbstractFourierLattice, ::Char) for additional details.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.conventionalize-Union{Tuple{D}, Tuple{DirectBasis{D},Char}} where D","page":"API","title":"Crystalline.conventionalize","text":"conventionalize(Rs′::DirectBasis, cntr::Char) --> Rs::DirectBasis\n\nTransforms a primitive DirectBasis Rs′ into its conventional equivalent Rs, with the  transformation dependent on the centering type cntr (P, I, F, R, A, C, and p, c); for centering P and p, the conventional and primive bases coincide.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.crystal-NTuple{6,Real}","page":"API","title":"Crystalline.crystal","text":"crystal(a,b,c,α,β,γ) --> Rs::DirectBasis{3}\n\nCalculate basis vectors mathbfR_1, mathbfR_2, mathbfR_3 in a 3D Cartesian basis for a right-handed coordinate system with specified basis vector lengths a, b, c (associated with mathbfR_1, mathbfR_2, & mathbfR_3, respectively) and specified interaxial angles  α = (mathbfR_2mathbfR_3), β = (mathbfR_3mathbfR_1),  γ = (mathbfR_1mathbfR_2), with  denoting the angle between two vectors.\n\nFor definiteness, the mathbfR_1 basis vector is oriented along the x-axis of the Cartesian coordinate system, and the mathbfR_2 axis is placed in the xy-plane.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.crystal-Tuple{Real,Real,Real}","page":"API","title":"Crystalline.crystal","text":"crystal(a,b,γ) --> DirectBasis{2}\n\nCalculate basis vectors mathbfR_1, mathbfR_2 in a 2D Cartesian basis for a  right-handed coordinate system with specified basis vector lengths a, b (associated with mathbfR_1 & mathbfR_2, respectively) and specified interaxial angle γ = (mathbfR_1mathbfR_2).\n\nFor definiteness, the mathbfR_1 basis vector is oriented along the x-axis of the Cartesian coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.crystal-Tuple{Real}","page":"API","title":"Crystalline.crystal","text":"crystal(a)  --> DirectBasis{1}\n\nReturn a one-dimensional crystal with lattice period a.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.crystalsystem-Union{Tuple{DirectBasis{D}}, Tuple{D}} where D","page":"API","title":"Crystalline.crystalsystem","text":"crystalsystem(R::DirectBasis{D})\n\nDetermine the crystal system of a point lattice specified in a  conventional DirectBasis{D} of dimension D using Tables 2.1.2.1, 9.1.7.1, & 9.1.7.2 of the International Tables of  Crystallography, Volume 1 (ITA).  There are 4 crystal systems in 2D and 7 in 3D (see ITA 2.1.2(iii)):\n\nD System Conditions Free parameters\n1D linear none a\n2D square a=b & γ=90° a\n rectangular γ=90° a,b\n hexagonal a=b & γ=120° a\n oblique none a,b,γ\n3D cubic a=b=c & α=β=γ=90° a\n hexagonal a=b & α=β=90° & γ=120° a,c\n trigonal a=b & α=β=90° & γ=120° a,c (a,α for hR)\n tetragonal a=b & α=β=γ=90° a,c\n orthorhombic α=β=γ=90° a,b,c\n monoclinic α=γ=90° a,b,c,β≥90°\n triclinic none a,b,c,α,β,γ\n\nThe DirectBasis input is assumed to use conventional basis vectors;  i.e. not necessarily primitive. For primitive basis vectors, the  crystal system can be further reduced into 5 Bravais types in 2D and 14 in 3D.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.dim-Tuple{BandRep}","page":"API","title":"Crystalline.dim","text":"dim(BR::BandRep) --> Int64\n\nGet the number of bands included in a single BandRep BR; i.e. the \"band filling\" ν discussed in Po's papers.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.directbasis-Union{Tuple{Integer}, Tuple{D}, Tuple{Integer,Val{D}}} where D","page":"API","title":"Crystalline.directbasis","text":"directbasis(sgnum, D=3;    abclims, αβγlims)\ndirectbasis(sgnum, Val(D); abclims, αβγlims) --> DirectBasis{D}\n\nGenerates a (conventional) DirectBasis for a crystal compatible with  the space group number sgnum and dimensionality D. Free parameters in the lattice vectors are chosen randomly, with limits optionally supplied in abclims (lengths) and αβγlims (angles). By convention, the length of the first lattice vector (= a) is set to unity, such that the second and third (= b and c) lattice  vectors' lengths are relative to the first.\n\nLimits on the relative uniform distribution of lengths b and c can be specified as 2-tuple kwarg abclims; similarly, limits on  the angles α, β, γ can be set via αβγlims (only affects  oblique, monoclinic, & triclinic lattices).\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.find_representation","page":"API","title":"Crystalline.find_representation","text":"find_representation(symvals::AbstractVector{Number}, \n                    lgirs::AbstractVector{<:AbstractIrrep},\n                    αβγ::Union{AbstractVector{<:Real},Nothing}=nothing,\n                    assert_return_T::Type{<:Union{Integer, AbstractFloat}}=Int))\n\n                    --> Vector{assert_return_T}\n\nFrom a vector (or vector of vectors) of symmetry eigenvalues symvals sampled along all the operations of a group gᵢ, whose irreps are contained in irs (evaluated with optional free  parameters αβγ), return the multiplicities of each irrep.\n\nOptionally, the multiciplities' element type can be specified via the assert_return_T argument (performing checked conversion; returns nothing if representation in  assert_return_T is impossible). This can be useful if one suspects a particular band to  transform like a fraction of an irrep (i.e., the specified symmetry data is incomplete).\n\nExtended help\n\nEffectively, this applies the projection operator P⁽ʲ⁾ of each irrep's character set χ⁽ʲ⁾(gᵢ) (j = 1, ... , Nⁱʳʳ) to the symmetry data sᵢ ≡ symvals:\n\nP⁽ʲ⁾  ≡ (dⱼ/|g|) ∑ᵢ χ⁽ʲ⁾(gᵢ)*gᵢ         [characters χ⁽ʲ⁾(gᵢ), irrep dimension dⱼ]\nP⁽ʲ⁾s = (dⱼ/|g|) ∑ᵢ χ⁽ʲ⁾(gᵢ)*sᵢ = nⱼ,   [number of bands that transform like jth irrep]\n\nreturning the irrep multiplicities mⱼ ≡ nⱼ/dⱼ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.generate-Union{Tuple{AbstractArray{SymOperation{D},1}}, Tuple{D}} where D","page":"API","title":"Crystalline.generate","text":"generate(gens; modτ, Nmax)\n\n\nGenerate a group from a finite set of generators gens. Returns a GenericGroup.\n\nKeyword arguments\n\nmodτ (default, true): the group composition operation can either be taken modulo lattice vectors (true) or not (false, useful e.g. for site symmetry groups). In this case, the provided generators will also be taken modulo integer lattice translations.\nNmax (default, 256): the maximum size of the generated group. This is essentially a cutoff set to ensure halting of execution in case the provided set of generators do not define a finite group (especially relevant if modτ=false). If more operations than Nmax are generated, the method throws an overflow error.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.get_lgirreps-Union{Tuple{Integer}, Tuple{D}, Tuple{Integer,Val{D}}, Tuple{Integer,Val{D},Union{Nothing, JLD2.JLDFile}}, Tuple{Integer,Val{D},Union{Nothing, JLD2.JLDFile},Union{Nothing, JLD2.JLDFile}}} where D","page":"API","title":"Crystalline.get_lgirreps","text":"get_lgirreps(sgnum::Integer, D::Union{Val{Int}, Integer}=Val(3))\n                                                -> Dict{String, Vector{LGIrrep{D}}}\n\nFor given space group number sgnum and dimension D, return the associated little group (or \"small\") irreps (LGIrrep{D}s) at high-symmetry k-points, lines, and planes. \n\nReturns a Dict with little group k-point labels as keys and vectors of LGIrrep{D}s as values.\n\nNotes\n\nCurrently, only D = 3 is supported.\nThe returned irreps are complex in general. Real irreps (as needed in time-reversal invariant settings) can subsequently be obtained with the realify method.\nReturned irreps are spinless.\n\nReferences\n\nThe underlying data is sourced from the ISOTROPY ISO-IR dataset. If used in research, please cite the original reference material associated with ISO-IR:\n\nStokes, Hatch, & Campbell, ISO-IR, ISOTROPY Software Suite\nStokes, Campbell, & Cordes, Acta Cryst. A. 69, 388-395 (2013).\n\nThe ISO-IR dataset is occasionally missing some k-points that lie outside the basic domain but still resides in the representation domain (i.e. k-points with postscripted 'A', 'B', etc. labels, such as 'ZA'). In such cases, the missing irreps may instead have been manually sourced from the Bilbao Crystallographic Database.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.get_littlegroups-Union{Tuple{Integer}, Tuple{D}, Tuple{Integer,Val{D}}, Tuple{Integer,Val{D},Union{Nothing, JLD2.JLDFile}}} where D","page":"API","title":"Crystalline.get_littlegroups","text":"get_littegroups(sgnum::Integer, D::Union{Val{Int}, Integer}=Val(3)) \n                                                    -> Dict{String, LittleGroup{D}}\n\nFor given space group number sgnum and dimension D, return the associated little groups (LittleGroups{D}s) at high-symmetry k-points, lines, and planes (see also get_lgirreps).\n\nReturns a Dict with little group k-point labels as keys and vectors of LittleGroup{D}s as values.\n\nNotes\n\nA conventional crystallographic setting is assumed (as in spacegroup).\n\nUnlike spacegroup, \"centering\"-copies of symmetry operations are not included in the returned LittleGroups; as an example, space group 110 (body-centered, with centering symbol 'I') has a centering translation [1/2,1/2,1/2] in the conventional setting: the symmetry operations returned by spacegroup thus includes e.g. both {1|0} and  {1|½,½,½} while the symmetry operations returned by get_littlegroups only include {1|0} (and so on).\n\nCurrently, only D = 3 is supported.\n\nReferences\n\nThe underlying data is sourced from the ISOTROPY dataset: see also get_lgirreps.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.get_pgirreps-Tuple{String,Val{3}}","page":"API","title":"Crystalline.get_pgirreps","text":"get_pgirreps(iuclab::String, Val{D}) where D ∈ (1,2,3)\nget_pgirreps(iuclab::String, D)\n\nReturn the (crystallographic) point group irreps of the IUC label iuclab of dimension D as a vector of PGIrrep{D}s.\n\nNotes\n\nThe irrep labelling follows the conventions of CDML [1] [which occasionally differ from those in e.g. Bradley and Cracknell, The Mathematical Theory of Symmetry in Solids (1972)].\n\nThe data is sourced from the Bilbao Crystallographic Server [2]. If you are using this  functionality in an explicit fashion, please cite the original reference [3].\n\nReferences\n\n[1] Cracknell, Davies, Miller, & Love, Kronecher Product Tables 1 (1979).\n\n[2] Bilbao Crystallographic Server:      https://www.cryst.ehu.es/cgi-bin/cryst/programs/representations_point.pl\n\n[3] Elcoro et al.,      J. of Appl. Cryst. 50, 1457 (2017)\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.herring-Union{Tuple{D}, Tuple{LGIrrep,AbstractArray{SymOperation{D},1}}, Tuple{LGIrrep,AbstractArray{SymOperation{D},1},Union{Nothing, Array{var\"#s128\",1} where var\"#s128\"<:Real}}} where D","page":"API","title":"Crystalline.herring","text":"herring(lgir::LGIrrep, sgops::AbstractVector{SymOperation{D}},\n        αβγ::Union{Vector{<:Real},Nothing}=nothing)        --> Tuple{Int, Int}\n\nComputes the Herring criterion for a small irrep lgir::LGIrrep, from \n\n χ(βb²)g_0M(k)\n\nover symmetry operations βb that take k  -k.  Here g_0 is the order of the point group of the space group and M(k) is the order of the star(k) [both in a primitive basis].\n\nThe returned value,  χ(βb²)g_0M(k), is one of three integers in  1-10 corresponding to {real, pseudoreal, complex} reality.  We remind that ISOTROPY's convention (and hence, the type field of LGIrreps and  PGIrreps) of the same reality types is 123.\n\nThe provided space group operations sgops must be the set reduced by primitive translation vectors; i.e. using spacegroup(...) directly is not allowable in general (since the irreps we reference only include these \"reduced\" operations). This reduced set of operations can be obtained e.g. from the Γ point irreps of ISOTROPY's dataset, or alternatively, from reduce_ops(spacegroup(...), true).\n\nAs a sanity check, a value of αβγ can be provided to check for invariance along a symmetry line/plane/general point in k-space. Obviously, the reality  type should invariant to this choice.\n\nImplementation:  See e.g. Inui's Eq. (13.48), Dresselhaus, p. 618, and  and Herring's original paper at https://doi.org/10.1103/PhysRev.52.361. We mainly followed Cornwell, p. 150-152 & 187-188.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.interpolate_kvpath-Tuple{AbstractArray{var\"#s12\",1} where var\"#s12\"<:(AbstractArray{var\"#s25\",1} where var\"#s25\"<:Real),Integer}","page":"API","title":"Crystalline.interpolate_kvpath","text":"interpolate_kvpath(kvs::AbstractVector{<:AbstractVector{<:Real}}, Ninterp::Integer) \n    --> Vector{Vector{Float64}}, Int64\n\nComputes an interpolated k-path between the discrete k-points in kvs, so that the interpolated path has approximately Ninterp points in total (typically fewer).\n\nSince the actual number of points in the path may deviate from the requested Ninterp, the actual number of points in the path is returned along with the interpolated itself.\n\nNote that, in general, it is not possible to do this so that all interpolated k-points are equidistant; but points are equidistant in-between the initial discrete points provided in kvs.\n\nSee also splice_kvpath.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.isnormal-Union{Tuple{T}, Tuple{T,T}} where T<:(AbstractArray{var\"#s16\",1} where var\"#s16\"<:(SymOperation{var\"#s15\"} where var\"#s15\"))","page":"API","title":"Crystalline.isnormal","text":"isnormal(opsᴳ::T, opsᴴ::T; verbose::Bool=false) where T<:AbstractVector{SymOperation{D}}\n                                                --> Bool\n\nDetermine whether the operations in group H are normal in the group G (each with  operations opsᴳ and opsᴴ), in the sense that \n\nghg¹  H  gG  hH\n\nReturns a Boolean answer (true if normal, false if not).\n\nNote\n\nThis compares space groups rather than space group types, i.e. the  comparison assumes a matching setting choice between H and G. To compare space  group types with different conventional settings, they must first be transformed to a shared setting.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.israyrep","page":"API","title":"Crystalline.israyrep","text":"israyrep(lgir::LGIrrep, αβγ=nothing) -> (::Bool, ::Matrix)\n\nComputes whether a given little group irrep ir is a ray representation  by computing the coefficients αᵢⱼ in DᵢDⱼ=αᵢⱼDₖ; if any αᵢⱼ differ  from unity, we consider the little group irrep a ray representation (as opposed to the simpler \"vector\" representations where DᵢDⱼ=Dₖ). The function returns a boolean (true => ray representation) and the coefficient matrix αᵢⱼ.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.issubgroup-Union{Tuple{T}, Tuple{D}, Tuple{T,T}} where T<:AbstractArray{SymOperation{D},1} where D","page":"API","title":"Crystalline.issubgroup","text":"issubgroup(opsᴳ::T, opsᴴ::T) where T<:AbstractVector{SymOperation{D}} --> Bool\n\nDetermine whether the operations in group H are a subgroup of the group G (each with  operations opsᴳ and opsᴴ, respectively), i.e. whether HG. Specifically, this requires that G and H are both groups and that for every hH there exists an element gG such that h=g.\n\nReturns a Boolean answer (true if normal, false if not).\n\nNote\n\nThis compares space groups rather than space group types, i.e. the  comparison assumes a matching setting choice between H and G. To compare space  group types with different conventional settings, they must first be transformed to a shared setting.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.issymmorph","page":"API","title":"Crystalline.issymmorph","text":"issymmorph(sgnum::Integer, D::Integer=3) --> Bool\n\nChecks whether a given space group sgnum (of dimensionality D) is symmorphic (true) or nonsymmorphic (false).\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.issymmorph-Tuple{SymOperation,Char}","page":"API","title":"Crystalline.issymmorph","text":"issymmorph(op::SymOperation, cntr::Char) --> Bool\n\nChecks whether a given symmetry operation op is symmorphic (true) or nonsymmorphic (false). The operation is assumed to be given in a  conventional basis; but the check requires that the translation is zero  in a primitive basis. Accordingly, the centering cntr must provided.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.issymmorph-Tuple{Union{LittleGroup, SpaceGroup}}","page":"API","title":"Crystalline.issymmorph","text":"issymmorph(sg::AbstractGroup) --> Bool\n\nChecks whether a given space group sg is symmorphic (true) or nonsymmorphic (false).\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.iuc","page":"API","title":"Crystalline.iuc","text":"iuc(sgnum::Integer, D::Integer=3) --> String\n\nReturns the IUC (International Union of Crystallography) notation for space group number sgnum and dimensionality D, as used in the International Tables of Crystallography.  The notation is sometimes also known as the Hermann-Mauguin notation; the functionality is consequently aliased by hermannmauguin(sgnum, D).  IUC/Hermann-Mauguin notation applies in one, two, and three-dimensions.\n\nFor more information, see https://en.wikipedia.org/wiki/Hermann%E2%80%93Mauguin_notation.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.levelsetlattice","page":"API","title":"Crystalline.levelsetlattice","text":"levelsetlattice(sgnum::Integer, D::Integer=2, idxmax::NTuple=ntuple(i->2,D))\n    --> UnityFourierLattice{D}\n\nCompute a \"neutral\"/uninitialized Fourier lattice basis, a UnityFourierLattice, consistent with the symmetries of the space group sgnum in dimension D. The resulting lattice flat is expanded in a Fourier basis split into symmetry-derived orbits, with intra-orbit  coefficients constrained by the symmetries of the space-group. The inter-orbit coefficients are, however, free and unconstrained.\n\nThe Fourier resolution along each reciprocal lattice vector is controlled by idxmax: e.g., if D = 2 and idxmax = (2, 3), the resulting Fourier lattice may contain  reciprocal lattice vectors (k₁, k₂) with k₁∈[0,±1,±2] and k₂∈[0,±1,±2,±3], referred  to a 𝐆-basis.\n\nThis \"neutral\" lattice can, and usually should, be subsequently modulated by modulate (modulates the inter-orbit coefficients, which will often eliminate symmetries that may remain in the \"neutral\" configuration, where all inter-orbit coefficients are unity).\n\nExamples\n\nCompute a UnityFourierLattice, modulate it with random inter-orbit coefficients via modulate, and finally plot it (requires using PyPlot):\n\njulia> uflat = levelsetlattice(16, 2)\njulia> flat  = modulate(uflat)\njulia> Rs    = directbasis(16, 2) \njulia> plot(flat, Rs)\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.matrix","page":"API","title":"Crystalline.matrix","text":"matrix(BRS::BandRepSet[, includedim::Bool=false])\n\nReturn a matrix representation of BRS::BandRepSet, with band representations as columns  and irreps over rows.\n\nFor includedim=true the band filling (i.e. dim.(BRS)) is included as the last row.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.modulate-Union{Tuple{Crystalline.AbstractFourierLattice{D}}, Tuple{D}, Tuple{Crystalline.AbstractFourierLattice{D},Union{Nothing, AbstractArray{Complex{Float64},1}}}, Tuple{Crystalline.AbstractFourierLattice{D},Union{Nothing, AbstractArray{Complex{Float64},1}},Union{Nothing, Real}}} where D","page":"API","title":"Crystalline.modulate","text":"modulate(flat::UnityFourierLattice{D},\nmodulation::AbstractVector{ComplexF64}=rand(ComplexF64, length(getcoefs(flat))),\nexpon::Union{Nothing, Real}=nothing)\n                        --> ModulatedFourierLattice{D}\n\nDerive a concrete, modulated Fourier lattice from flat, a UnityFourierLattice  struct (that contains the interrelations between orbit coefficients), by  multiplying the \"normalized\" orbit coefficients by a modulation, a complex modulating vector (in general, should be complex; otherwise restores unintended symmetry to the lattice). Distinct modulation vectors produce distinct  realizations of the same lattice described by the original flat. By default, a random complex vector is used.\n\nAn exponent expon can be provided, which introduces a penalty term to short- wavelength features (i.e. high-|G| orbits) by dividing the orbit coefficients by |G|^expon; producing a more \"localized\" and \"smooth\" lattice boundary when expon > 0 (reverse for expon < 0). This basically amounts to a  continuous \"simplifying\" operation on the lattice (it is not necessarily a  smoothing operation; it simply suppresses \"high-frequency\" components). If expon = nothing, no rescaling is performed. \n\nThe normscale(!) methods exists to perform subsequent expon norm-rescaling  of a ModulatedFourierLattice.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.normscale!-Tuple{ModulatedFourierLattice,Real}","page":"API","title":"Crystalline.normscale!","text":"normscale!(flat::ModulatedFourierLattice, expon::Real) --> ModulatedFourierLattice\n\nIn-place equivalent of normscale: changes flat.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.normscale-Tuple{ModulatedFourierLattice,Real}","page":"API","title":"Crystalline.normscale","text":"normscale(flat::ModulatedFourierLattice, expon::Real) --> ModulatedFourierLattice\n\nApplies subsequent norm-rescaling via expon; see detailed description  in modulate. An in-place variant is provided as normscale!.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.orbit-Tuple{AbstractArray{var\"#s127\",1} where var\"#s127\"<:(AbstractArray{var\"#s126\",2} where var\"#s126\"<:Real),AbstractArray{var\"#s125\",1} where var\"#s125\"<:Real}","page":"API","title":"Crystalline.orbit","text":"orbit(Ws, x)\n\nComputes the orbit of x under a set of point-group operations Ws, i.e. computes the set {gx | g∈G} where g denotes elements of the group G composed of all operations in Ws (possibly iterated, to ensure full coverage).\n\nAt the moment, we only consider point group operations; i.e. there are  no nonsymmorphic Ws parts. \n\nIt is important that Ws and x are given in the same basis. \n\n[W' = PWP⁻¹ if the basis change is from coordinates r to r' = Pr, corresponding  to a new set of basis vectors (x̂')ᵀ=x̂ᵀP; e.g., when going from a direct basis representation to a Cartesian one, the basis change matrix is P = [R₁ R₂ R₃], with Rᵢ inserted as column vectors]\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.pointgroup-Union{Tuple{AbstractArray{SymOperation{D},1}}, Tuple{D}} where D","page":"API","title":"Crystalline.pointgroup","text":"pointgroup(ops:AbstractVector{SymOperation{D}})\npointgroup(sg::AbstractGroup)\n\nComputes the point group associated with a space group sg (characterized by a set of operators ops, which, jointly with lattice translations generate  the space group), obtained by \"taking away\" any translational parts and  then reducing to the resulting unique rotational operations. (technically, in the language of Bradley & Cracknell, this is the so-called isogonal point group of sg; see Sec. 1.5).\n\nReturns a Vector of SymOperations.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.prepare_mpbcalc!-Union{Tuple{D}, Tuple{IO,Integer,Crystalline.AbstractFourierLattice{D},DirectBasis{D}}, Tuple{IO,Integer,Crystalline.AbstractFourierLattice{D},DirectBasis{D},Union{Nothing, Real}}, Tuple{IO,Integer,Crystalline.AbstractFourierLattice{D},DirectBasis{D},Union{Nothing, Real},Real}, Tuple{IO,Integer,Crystalline.AbstractFourierLattice{D},DirectBasis{D},Union{Nothing, Real},Real,Real}, Tuple{IO,Integer,Crystalline.AbstractFourierLattice{D},DirectBasis{D},Union{Nothing, Real},Real,Real,String}} where D","page":"API","title":"Crystalline.prepare_mpbcalc!","text":"prepare_mpbcalc!(...)\n\nFormats a set of parameters that uniquely specify an MPB calculation, given a  space group number sgnum, a Fourier lattice flat, a DirectBasis Rs, a filling fraction filling for flat, interior and exterior (above, below the contour) permittivities εin and εout, as well as a list of k-vectors kvecs, an  identifying tag id (to label the calculation for book-keeping purposes), a  resolution for the MPB calculation res, and a selection of calculation type runtype (\"all\", \"te\", or \"tm\"). The results are written to requested IO io.\n\nOur preferred choice is to write these parameters to a bash file, with a name generated by the mpb_calcname(...) method.\n\nThe options are expected to be fed to the fourier-lattice.ctl file, e.g. through a bash script of the following kind:\n\n    IFS=$'\\n'; # stop command-substitutions from word-splitting at space\n\n    PATH_TO_MPB_EXECUTABLE \\\n        (cat ${calcname}.sh)\n        ctl/fourier-lattice.ctl 2>&1 | tee logs/${calcname}.log\n        \n    unset IFS; # restore usual command-substitution word-splitting practice\n\non gbar, PATH_TO_MPB_EXECUTABLE is ~/postdoc/mpb-transform-dev/1.8-dev/bin/mpb. Locally, in mpb-ctl we have a file run-fourier-lattice.sh which performs the  above, with calcname specified as an input parameter (assumed to be a subfolder /input/).\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.primitivize-Tuple{KVec,Char}","page":"API","title":"Crystalline.primitivize","text":"primitivize(kv::KVec, cntr::Char) --> kv′::KVec\n\nTransforms a conventional reciprocal coordinate vector kv to a standard primitive basis (specified by the centering type cntr), returning the associated reciprocal coordinate vector kv′.\n\nNote that a basis change matrix P (as returned by  Crystalline.primitivebasismatrix) transforms direct coordinate vectors as r=P¹r but transforms reciprocal coordinates as k = Pᵀk (see e.g. ITA7 Sec. 1.5.1.2 and 1.5.2.1). Recall also the distinction between transforming a basis and the coordinates of a vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.primitivize-Union{Tuple{D}, Tuple{Crystalline.AbstractFourierLattice{D},Char}} where D","page":"API","title":"Crystalline.primitivize","text":"primitivize(flat::AbstractFourierLattice, cntr::Char) --> ::typeof(flat)\n\nGiven flat referred to a conventional basis with centering cntr, compute the derived (but physically equivalent) lattice flat′ referred to the associated primitive basis. \n\nSpecifically, if flat refers to a direct conventional basis Rs  (𝐚 𝐛 𝐜) [with  coordinate vectors 𝐫  (r₁ r₂ r₃)^T] then flat′ refers to a direct primitive basis Rs′  (𝐚 𝐛 𝐜)  (𝐚 𝐛 𝐜)P [with coordinate vectors 𝐫  (r₁ r₂ r₃)^T = P¹𝐫], where P denotes the basis-change matrix obtained from primitivebasismatrix(...).\n\nTo compute the associated primitive basis vectors, see primitivize(::DirectBasis, ::Char) [specifically, Rs′ = primitivize(Rs, cntr)].\n\nExamples\n\nA centered ('c') lattice from plane group 5 in 2D, plotted in its  conventional and primitive basis (requires using PyPlot):\n\njulia> using PyPlot\njulia> sgnum = 5; D = 2; cntr = centering(sgnum, D)  # 'c' (body-centered)\n\njulia> Rs   = directbasis(sgnum, D)     # conventional basis (rectangular)\njulia> flat = levelsetlattice(sgnum, D) # Fourier lattice in basis of Rs\njulia> flat = modulate(flat)            # modulate the lattice coefficients\njulia> plot(flat, Rs)\n\njulia> Rs′   = primitivize(Rs, cntr)    # primitive basis (oblique)\njulia> flat′ = primitivize(flat, cntr)  # Fourier lattice in basis of Rs′\njulia> plot(flat′, Rs′)\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.primitivize-Union{Tuple{D}, Tuple{Crystalline.Basis{D},Integer}} where D","page":"API","title":"Crystalline.primitivize","text":"primitivize(Vs::Basis, sgnum::Integer) --> Rs′::Basis\n\nTransforms a conventional Basis (either DirectBasis or ReciprocalBasis) Vs into its primitive equivalent Vs′, provided that its centering differs from the conventional (P or p), by inferring the Bravais type from the space group number sgnum and applying an applying an appropriate (Basis-type specific) transformation. \n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.primitivize-Union{Tuple{D}, Tuple{DirectBasis{D},Char}} where D","page":"API","title":"Crystalline.primitivize","text":"primitivize(Rs::DirectBasis, cntr::Char) --> Rs′::DirectBasis\n\nTransforms a conventional DirectBasis Rs into its primitive  equivalent Rs′, with the transformation dependent on the centering type cntr (P, I, F, R, A, C, and p, c); for centering P and p, the  conventional and primive bases coincide.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.primitivize-Union{Tuple{D}, Tuple{ReciprocalBasis{D},Char}} where D","page":"API","title":"Crystalline.primitivize","text":"primitivize(Gs::ReciprocalBasis, cntr::Char) --> Gs′::ReciprocalBasis\n\nCalculates the primitive reciprocal basis associated with an assumed conventional reciprocal basis Gs::ReciprocalBasis with centering type cntr.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.primitivize-Union{Tuple{D}, Tuple{SymOperation{D},Char}, Tuple{SymOperation{D},Char,Bool}} where D","page":"API","title":"Crystalline.primitivize","text":"primitivize(op::SymOperation, cntr::Char, modw::Bool=true) --> SymOperation\n\nTransforms a symmetry operation op = Ww from a conventional cell to a primitive cell (specified by its centering character cntr), then denoted Ww; i.e. performs a basis change op′  Ww = Pp¹WwPp where P and p are the basis change matrix and origin shifts, respectively, of the transformation.\n\nBy default, translation parts of op′, i.e. w are reduced modulo 1 (modw = true); to disable this, set modw = false.\n\nFor additional details, see ITA6 Sec. 1.5.2.3, p. 84.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.realify-Union{Tuple{AbstractArray{LGIrrep{D},1}}, Tuple{D}, Tuple{AbstractArray{LGIrrep{D},1},Bool}} where D","page":"API","title":"Crystalline.realify","text":"realify(lgirs::AbstractVector{<:LGIrrep}, verbose::Bool=false)\n                                                    --> AbstractVector{<:LGIrrep}\n\nFrom lgirs, a vector of LGIrreps, determine the associated (gray) co-representations, i.e. the \"real\", or \"physical\" irreps that are relevant in scenarios with time-reversal symmetry.\n\nFor LGIrrep that are real (type=1), or that characterize a k-point 𝐤 which is not equivalent to -𝐤 (i.e. its star does not include both 𝐤 and -𝐤; equivalently, the little group includes time-reversal symmetry), the associated co-representations are just the  original irreps themselves.  For pseudo-real (type=2) and complex (type=3) LGIrreps where ±𝐤 are equivalent, the associated co-representations are built from pairs of irreps that \"stick\" together. This method computes this pairing and sets the LGIrrep field iscorep to true, to indicate that the resulting \"paired irrep\" (i.e. the co-representation) should be doubled with  itself (pseudo-real type) or its complex conjugate (complex type).\n\nBackground\n\nFor background, see p. 650-652 (and 622-626 for point groups) in Bradley & Cracknell's book. Their discussion is for magnetic groups (the \"realified\" irreps are really correspond to co-representations of \"gray\" magnetic groups).  Cornwell's book also does a good job of explicating this, as does Inui (p. 296-299).\n\nKeyword arguments\n\nverbose::Bool: if set to true, prints details about mapping from small irrep to small\n\ncorep for each LGIrrep (default: false).\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.reciprocalbasis-Union{Tuple{Union{Tuple{Vararg{Array{var\"#s130\",1} where var\"#s130\"<:Real,D}}, DirectBasis{D}}}, Tuple{D}} where D","page":"API","title":"Crystalline.reciprocalbasis","text":"reciprocalbasis(Rs::DirectBasis{D}) --> Gs::ReciprocalBasis{D}\n\nCalculates the reciprocal basis associated with a DirectBasis Rs (alternatively supplied as an NTuple of Vectors). Returns a ReciprocalBasis.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.schoenflies-Tuple{Integer}","page":"API","title":"Crystalline.schoenflies","text":"schoenflies(sgnum::Integer) --> String\n\nReturns the Schoenflies notation for a given space group number sgnum. Schoenflies notation only applies to point groups and  space groups, not plane groups, so this notation is only relevant in three dimensions.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.seitz-Union{Tuple{SymOperation{D}}, Tuple{D}} where D","page":"API","title":"Crystalline.seitz","text":"seitz(op::SymOperation) --> String\n\nComputes the correponding Seitz notation for a symmetry operation in triplet/xyzt form.\n\nImplementation based on ITA5 Table 11.2.1.1, with 3D point group parts inferred from the trace and determinant of the matrix W in the triplet Ww.\n\ndetW\\trW -3 -2 -1 0 1 2 3\n1   2 3 4 6 1\n-1 -1 -6 -4 -3 m  \n\nwith the elements of the table giving the type of symmetry operation in in Hermann-Mauguin notation. The rotation axis and the rotation sense are  computed following the rules in ITA6 Sec. 1.2.2.4(1)(b-c). The implementation has been checked against the Tables 1.4.2.1-5 of ITA6.\n\nNote that the orientation of axis (i.e. its sign) is not necessarily equal to the orientation picked in those tables; it is a matter of convention, and the conventions have not been explicated in ITA6.\n\n2D operations are treated by the same procedure, by elevation in a third dimension; 1D operations by a simple inspection of sign.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.spacegroup-Union{Tuple{Integer}, Tuple{D}, Tuple{Integer,Val{D}}} where D","page":"API","title":"Crystalline.spacegroup","text":"spacegroup(sgnum::Integer, D::Integer=3) --> SpaceGroup{D}\n\nReturn the space group symmetry operations in for a given space group number sgnum and  dimensionality D as a SpaceGroup{D}. The returned symmetry operations are specified relative to the conventional basis choice, i.e. are not necessarily primitive (see centering). If desired, operations for the primitive unit cell can be subsequently generated using  primitivize or reduce_ops.\n\nThe default choices for the conventional basis vectors are specified in Bilbao as: \n\nUnique axis b (cell choice 1) for space groups within the monoclinic system.\nObverse triple hexagonal unit cell for R space groups.\nOrigin choice 2: inversion center at (0,0,0). (Relevant for the centrosymmetric space groups where there are two origin choices, in the orthorhombic, tetragonal and cubic  systems)\n\nSee also directbasis.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.splice_kvpath-Tuple{AbstractArray{var\"#s21\",1} where var\"#s21\"<:(AbstractArray{var\"#s16\",1} where var\"#s16\"<:Real),Integer}","page":"API","title":"Crystalline.splice_kvpath","text":"splice_kvpath(kvs::AbstractVector{<:AbstractVector{<:Real}}, Nsplice::Integer) \n                                                            --> Vector{Vector{Float64}}\n\nComputes an interpolated k-path between the discrete k-points in kvs, inserting Nsplice points between each pair of adjacent k-points.\n\nSee also interpolate_kvpath.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.subduction_count-Union{Tuple{T}, Tuple{T,T}, Tuple{T,T,Union{Nothing, Array{var\"#s127\",1} where var\"#s127\"<:Real}}} where T<:Crystalline.AbstractIrrep","page":"API","title":"Crystalline.subduction_count","text":"subduction_count(Dᴳᵢ, Dᴴⱼ[, αβγᴴⱼ]) --> Int64\n\nFor two groups G and H, where H is a subgroup of G, i.e. G>H, with associated  irreducible representations Dᴳᵢ(g) and Dᴴⱼ(g) for elements gG and hHG, compute the compatibility relation between the two irreps from the subduction reduction formula (or \"magic\" formula/Schur orthogonality relation): this is essentially how many times nᴳᴴᵢⱼ the subduced representation DᴳᵢH contains the irrep Dᴴⱼ;  in other words, this gives the compatibility between the two irreps.\n\nOptionally, a vector αβγᴴⱼ may be provided, to evaluate the characters/irreps  of Dᴳᵢ at a concrete value of αβγ. This is e.g. meaningful for LGIrreps at non- special k-vectors. Defaults to nothing.\n\nThe reduction formula [e.g. Eq. (15) of https://arxiv.org/pdf/1706.09272.pdf] is:\n\nnᴳᴴᵢⱼ = H^-1_h χ^G_i(h)χ^H_j(h)*\n\nAs an example, consider space group 207 and the two compatible k-vectors  Γ (a point) and Σ (a line):\n\nlgirsd  = get_lgirreps(207, Val(3));\nΓ_lgirs = lgirsd[\"Γ\"]; # at Γ ≡ [0.0, 0.0, 0.0]\nΣ_lgirs = lgirsd[\"Σ\"]; # at Σ ≡ [α, α, 0.0]\n\nWe can test their compatibility like so:\n\n[[subduction_count(Γi, Σj) for Γi in Γ_lgirs] for Σj in Σ_lgirs]\n> # Γ₁ Γ₂ Γ₃ Γ₄ Γ₅\n>  [ 1, 0, 1, 1, 2] # Σ₁\n>  [ 0, 1, 1, 2, 1] # Σ₂\n\nThis entails the following compatibility relations between irreps at Γ and Σ:\n\nCompatibility relation Degeneracies\nΓ₁ → Σ₁ 1 → 1\nΓ₂ → Σ₂ 1 → 1\nΓ₃ → Σ₁ + Σ₂ 2 → 1 + 1\nΓ₄ → Σ₁ + 2Σ₂ 3 → 1 + 2\nΓ₅ → 2Σ₁ + Σ₂ 3 → 2 + 1\n\nwhere, in this case, all the small irreps are one-dimensional.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.transform-Union{Tuple{D}, Tuple{KVec{D},AbstractArray{var\"#s129\",2} where var\"#s129\"<:Real}} where D","page":"API","title":"Crystalline.transform","text":"transform(kv::KVec, P::AbstractMatrix{<:Real}) --> kv′::KVec\n\nReturns a transformed reciprocal coordinate vector kv′ from an original reciprocal coordinate vector kv and a basis change matrix P.\n\nNote that a basis change matrix P transforms reciprocal coordinates vectors as k = Pᵀk but transforms direct coordinate vectors as r=P¹r (see e.g. ITA7 Sec. 1.5.1.2 and 1.5.2.1).\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.transform-Union{Tuple{D}, Tuple{SymOperation{D},AbstractArray{var\"#s27\",2} where var\"#s27\"<:Real}, Tuple{SymOperation{D},AbstractArray{var\"#s25\",2} where var\"#s25\"<:Real,Union{Nothing, AbstractArray{var\"#s22\",1} where var\"#s22\"<:Real}}, Tuple{SymOperation{D},AbstractArray{var\"#s21\",2} where var\"#s21\"<:Real,Union{Nothing, AbstractArray{var\"#s16\",1} where var\"#s16\"<:Real},Bool}} where D","page":"API","title":"Crystalline.transform","text":"transform(op::SymOperation, P::Matrix{<:Real}, \n          p::Union{Vector{<:Real}, Nothing}=nothing,\n          modw::Bool=true)                          --> SymOperation\n\nTransforms a op = Ww by a rotation matrix P and a translation vector p (can be nothing for zero-translations), producing a new symmetry operation  op′ = Ww: (see ITA6, Sec. 1.5.2.3)\n\nWw = Pp^-1WwPp\n\nwith\n\nW = P^-1WP and w = P^-1(w+Wp-p)\n\nBy default, the translation part of op′, i.e. w, is reduced to the range 01),  i.e. computed modulo 1. This can be disabled by setting modw = false (default, modw = true).\n\nSee also primitivize and conventionalize.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.wyckpos-Union{Tuple{D}, Tuple{Integer,Val{D}}} where D","page":"API","title":"Crystalline.wyckpos","text":"wyckpos(sgnum, _)\n\n\nReturn the Wyckoff positions of space group sgnum in dimension D as a  Vector{WyckPos{D}.\n\nThe positions are given in the conventional basis setting, following the conventions of the Bilbao Crystallographic Server (from where the underlying data is obtained [1]).\n\n[1] Aroyo, et. al. Zeitschrift fuer Kristallographie (2006), 221, 1, 15-27.\n\n\n\n\n\n","category":"method"},{"location":"api/#Unexported-API","page":"API","title":"Unexported API","text":"","category":"section"},{"location":"api/#Methods","page":"API","title":"Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Crystalline]\nPrivate = true\nFilter  = t->any(t′->basename(dirname(string(t′.file)))===\"src\", methods(t)) # restrict to methods in /src/ (e.g. exclude /build/)","category":"page"},{"location":"api/#Crystalline.BandRep","page":"API","title":"Crystalline.BandRep","text":"struct BandRep <: AbstractArray{Int64,1}\n\nwyckpos::String\nsitesym::String\nlabel::String\ndim::Integer\ndecomposable::Bool\nspinful::Bool\nirvec::Array{Int64,1}\nirlabs::Array{String,1}\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.BandRepSet","page":"API","title":"Crystalline.BandRepSet","text":"struct BandRepSet <: AbstractArray{BandRep,1}\n\nsgnum::Int64\nbandreps::Array{BandRep,1}\nkvs::Array{var\"#s52\",1} where var\"#s52\"<:KVec\nklabs::Array{String,1}\nirlabs::Array{String,1}\nallpaths::Bool\nspinful::Bool\ntimeinvar::Bool\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.CharacterTable","page":"API","title":"Crystalline.CharacterTable","text":"struct CharacterTable{D}\n\nops::Array{SymOperation{D},1} where D\nirlabs::Array{String,1}\nchartable::Array{Complex{Float64},2}\ntag::String\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.CharacterTable-Union{Tuple{AbstractArray{var\"#s15\",1} where var\"#s15\"<:Crystalline.AbstractIrrep{D}}, Tuple{D}, Tuple{AbstractArray{var\"#s12\",1} where var\"#s12\"<:Crystalline.AbstractIrrep{D},Union{Nothing, AbstractArray{var\"#s52\",1} where var\"#s52\"<:Real}}} where D","page":"API","title":"Crystalline.CharacterTable","text":"CharacterTable(irs::AbstractVector{<:AbstractIrrep}, αβγ=nothing)\n\nReturns a CharacterTable associated with vector of AbstractIrreps irs. \n\nOptionally, an αβγ::AbstractVector{<:Real} variable can be passed to evaluate the irrep (and associated characters) with concrete free parameters (e.g., for LGIrreps, a concrete k-vector sampled from a \"line-irrep\"). Defaults to nothing, indicating it being either  irrelevant (e.g., for PGIrreps) or all free parameters implicitly set to zero.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.DirectBasis","page":"API","title":"Crystalline.DirectBasis","text":"DirectBasis{D} <: Basis{D}\n\nvecs:NTuple{D, SVector{D, Float64}}\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.GenericGroup","page":"API","title":"Crystalline.GenericGroup","text":"struct GenericGroup{D} <: Crystalline.AbstractGroup{D}\n\noperations::Array{SymOperation{D},1} where D\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.KVec-Union{Tuple{AbstractString}, Tuple{D}} where D","page":"API","title":"Crystalline.KVec","text":"KVec{D}(str::AbstractString) --> KVec{D}\nKVec(str::AbstractString)    --> KVec\nKVec(::AbstractVector, ::AbstractMatrix) --> KVec\n\nReturn a KVec by parsing the string representations str, supplied in one of the following formats:\n\n\"($1,$2,$3)\"\n\"[$1,$2,$3]\"\n\"$1,$2,$3\"\n\nwhere the coordinates $1,$2, and $3 are strings that may contain fractions, decimal numbers, and \"free\" parameters {'α','β','γ'} (or, alternatively and equivalently, {'u','v','w'} or {'x','y','z'}).\n\nFractions such as 1/2 and decimal numbers can be parsed: but use of any other special operator besides / will produce undefined behavior (e.g. do not use *).\n\nExample\n\njulia> T(\"0.25,α,0\")\n[0.25, α, 0.0]\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.LGIrrep","page":"API","title":"Crystalline.LGIrrep","text":"struct LGIrrep{D} <: Crystalline.AbstractIrrep{D}\n\ncdml::String\nlg::LittleGroup{D} where D\nmatrices::Array{Array{Complex{Float64},2},1}\ntranslations::Array{Array{Float64,1},1}\ntype::Int64\niscorep::Bool\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.LittleGroup","page":"API","title":"Crystalline.LittleGroup","text":"struct LittleGroup{D} <: Crystalline.AbstractGroup{D}\n\nnum::Int64\nkv::KVec{D} where D\nklab::String\noperations::Array{SymOperation{D},1} where D\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.ModulatedFourierLattice","page":"API","title":"Crystalline.ModulatedFourierLattice","text":"ModulatedFourierLattice{D} <: AbstractFourierLattice{D}\n\nA D-dimensional concrete Fourier/plane wave lattice, derived from  a UnityFourierLattice by scaling/modulating its orbit coefficients  by complex numbers; in general, the coefficients do not have unit norm.\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.MultTable","page":"API","title":"Crystalline.MultTable","text":"struct MultTable{D} <: AbstractArray{Int64,2}\n\noperations::Array{SymOperation{D},1} where D\ntable::Array{Int64,2}\nisgroup::Bool\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.MultTable-Union{Tuple{AbstractArray{SymOperation{D},1}}, Tuple{D}} where D","page":"API","title":"Crystalline.MultTable","text":"MultTable(ops::AbstractVector{<:SymOperation{D}}, modτ=true, verbose=false)\n\nCompute the multiplication (or Cayley) table of ops, an AbstractVector of SymOperation{D}s. The modτ keyword argument controls whether composition of operations is taken modulo lattice vectors (true, default) or not (false).\n\nA MultTable{D} is returned, which contains symmetry operations resulting from composition  of row ∘ col operators; the table of indices give the symmetry operators relative to the ordering of ops.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.PGIrrep","page":"API","title":"Crystalline.PGIrrep","text":"struct PGIrrep{D} <: Crystalline.AbstractIrrep{D}\n\ncdml::String\npg::PointGroup{D} where D\nmatrices::Array{Array{Complex{Float64},2},1}\ntype::Int64\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.PointGroup","page":"API","title":"Crystalline.PointGroup","text":"struct PointGroup{D} <: Crystalline.AbstractGroup{D}\n\nnum::Int64\nlabel::String\noperations::Array{SymOperation{D},1} where D\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.RVec-Union{Tuple{AbstractString}, Tuple{D}} where D","page":"API","title":"Crystalline.RVec","text":"RVec{D}(str::AbstractString) --> RVec{D}\nRVec(str::AbstractString)    --> RVec\nRVec(::AbstractVector, ::AbstractMatrix) --> RVec\n\nReturn a RVec by parsing the string representations str, supplied in one of the following formats:\n\n\"($1,$2,$3)\"\n\"[$1,$2,$3]\"\n\"$1,$2,$3\"\n\nwhere the coordinates $1,$2, and $3 are strings that may contain fractions, decimal numbers, and \"free\" parameters {'α','β','γ'} (or, alternatively and equivalently, {'u','v','w'} or {'x','y','z'}).\n\nFractions such as 1/2 and decimal numbers can be parsed: but use of any other special operator besides / will produce undefined behavior (e.g. do not use *).\n\nExample\n\njulia> T(\"0.25,α,0\")\n[0.25, α, 0.0]\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.ReciprocalBasis","page":"API","title":"Crystalline.ReciprocalBasis","text":"ReciprocalBasis{D} <: Basis{D}\n\nvecs:NTuple{D, SVector{D, Float64}}\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.SpaceGroup","page":"API","title":"Crystalline.SpaceGroup","text":"struct SpaceGroup{D} <: Crystalline.AbstractGroup{D}\n\nnum::Int64\noperations::Array{SymOperation{D},1} where D\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.SymOperation","page":"API","title":"Crystalline.SymOperation","text":"struct SymOperation{D} <: AbstractArray{Float64,2}\n\nrotation::Crystalline.SquareStaticMatrices.SqSMatrix{D,Float64} where D\ntranslation::StaticArrays.SArray{Tuple{D},Float64,1,D} where D\n\n\n\n\n\n","category":"type"},{"location":"api/#Crystalline.UnityFourierLattice","page":"API","title":"Crystalline.UnityFourierLattice","text":"UnityFourierLatticeFourierLattice{D} <: AbstractFourierLattice{D}\n\nA general D-dimensional Fourier/plane wave lattice (specified  by G-orbits and coefficient interrelations); specifies the allowable  interrelations between coefficients within each orbit. The norm of  all orbit coefficients is unity. The G-orbits orbits (& associated coefficients) are sorted in order of increasing |G| (low to high).\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.:∘-Union{Tuple{D}, Tuple{SymOperation{D},KVec{D}}, Tuple{SymOperation{D},KVec{D},Bool}} where D","page":"API","title":"Base.:∘","text":"(∘)(op::SymOperation, kv::KVec, checkabc::Bool=true) --> KVec\n\nComputes the action of op::SymOperation  g on kv::KVec  k using that g acts on k-vectors as k(G) = g(R)ᵀ¹k(G), with g  in an R-basis and k in a G-basis. Returns a new KVec, that is  possibly distinct from its original only by a reciprocal lattice vector (i.e. multiple of integers).\n\nIf checkabc = false, the free part of KVec is not transformed (can be useful in situation when kabc is zero, and several  transformations are requested).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:∘-Union{Tuple{D}, Tuple{SymOperation{D},RVec{D}}} where D","page":"API","title":"Base.:∘","text":"∘(op::SymOperation, qv::RVec) --> RVec\n\nReturn the composition of op = Ww with a real-space vector qv.\n\nThe operation is taken to act directly, i.e. returns Wwqv = Wqv+w rather than Ww^-1qv = W^-1qv - W^-1w, which can instead be obtained from inv(op)∘qv.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:∘-Union{Tuple{T}, Tuple{T,T}, Tuple{T,T,Bool}} where T<:SymOperation","page":"API","title":"Base.:∘","text":"(∘)(op1::T, op2::T, modτ::Bool=true) where T<:SymOperation\n\nCompose two symmetry operations op1 = W₁w₁ and op2 = W₂w₂ using the composition rule (in Seitz notation)\n\nW₁w₁W₂w₂ = W₁W₂w₁+W₁w₂\n\nBy default, the translation part of the W₁W₂w₁+W₁w₂ is reduced to the range 01, i.e. computed modulo 1. This can be toggled off (or on) by the Boolean flag modτ (enabled, i.e. true, by default). Returns another SymOperation.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.inv-Tuple{T} where T<:SymOperation","page":"API","title":"Base.inv","text":"inv(op::SymOperation{D}) --> SymOperation{D}\n\nCompute the inverse {W|w}⁻¹ ≡ {W⁻¹|-W⁻¹w} of an operator op ≡ {W|w}.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.isapprox-Union{Tuple{D}, Tuple{KVec{D},KVec{D},Char}} where D","page":"API","title":"Base.isapprox","text":"isapprox(kv1::KVec, kv2::KVec[, cntr::Char]; kwargs...) --> Bool\n\nCompute approximate equality of two KVec's k1 and k2 modulo any  primitive G-vectors. To ensure that primitive G-vectors are used,  the centering type cntr (see centering(cntr, dim)) must be given (the dimensionality is inferred from kv1 and kv2). Optionally, keyword arguments (e.g., atol and rtol) can be  provided, to include in calls to Base.isapprox.\n\nIf cntr is not provided, the comparison will not account for equivalence by primitive G-vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.:⊚-Union{Tuple{T}, Tuple{T,T}} where T<:SymOperation","page":"API","title":"Crystalline.:⊚","text":"(⊚)(op1::T, op2::T) where T<:SymOperation -->  Vector{Float64}\n\nCompose two symmetry operations op1 = W₁w₁ and op2 = W₂w₂ and return the quotient of w₁+W₁w₂ and 1. This functionality complements op1∘op2, which yields the translation modulo 1; accordingly,  translation(op1∘op2) + op1⊚op2 yields the translation component of the composition op1 and op2 without taking it modulo 1, i.e. including any \"trivial\" lattice translation.\n\nNote that ⊚ can be auto-completed in Julia via \\circledcirc+[tab]\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline._findsubgroup-Union{Tuple{T}, Tuple{T,T}} where T<:(AbstractArray{var\"#s52\",1} where var\"#s52\"<:(SymOperation{var\"#s27\"} where var\"#s27\"))","page":"API","title":"Crystalline._findsubgroup","text":"_findsubgroup(opsᴳ, opsᴴ) --> (Bool, Vector{Int64})\n\nDetermine whether the group H (with operators opsᴴ) is a subgroup of the group G (with operators opsᴳ), i.e. whether HG, and returns an indexing vector idxs of opsᴳ into opsᴴ (empty if false), such that opsᴳ[idxs]  H.  The first return argument is a Boolean (whether HG); the second is idxs.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.basis2matrix-Union{Tuple{Crystalline.Basis{D}}, Tuple{D}} where D","page":"API","title":"Crystalline.basis2matrix","text":"basis2matrix(Vs::Basis{D}) where D\n\nCompute a matrix [Vs[1] Vs[2] .. Vs[D]] from Vs::Basis{D}, i.e. a matrix whose columns are the basis vectors in Vs. \n\nNote: Trying to use the iteration interface via hcat(Vs...) does not lead to a correctly       inferred type Matrix::Float64 (and a type-assertion does not improve speed much).       Instead, we just use the .vec field of Vs directly, which achieves good performance.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.compact_print_matrix","page":"API","title":"Crystalline.compact_print_matrix","text":"compact_print_matrix(io, X, prerow)\ncompact_print_matrix(io, X, prerow, elformat)\ncompact_print_matrix(io, X, prerow, elformat, sep)\n\n\nCanibalized and adapted from Base.print_matrix, specifically to allow a prerow input.\n\nShould never be used for printing very large matrices, as it will not wrap or abbreviate rows/columns.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.compatibility-Union{Tuple{Dict{String,var\"#s119\"} where var\"#s119\"<:AbstractArray{LGIrrep{D},1}}, Tuple{D}} where D","page":"API","title":"Crystalline.compatibility","text":"TODO: Seems entirely broken? Not sure what this is supposed to do.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.connectivity-Union{Tuple{Dict{String,var\"#s117\"} where var\"#s117\"<:AbstractArray{LGIrrep{D},1}}, Tuple{D}} where D","page":"API","title":"Crystalline.connectivity","text":"connectivity(lgirsd)\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.find_compatible_kvec-Tuple{KVec,Array{KVec,1}}","page":"API","title":"Crystalline.find_compatible_kvec","text":"find_compatible_kvec(kv, kvs′)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.findequiv-Union{Tuple{D}, Tuple{SymOperation{D},AbstractArray{SymOperation{D},1},Char}} where D","page":"API","title":"Crystalline.findequiv","text":"findequiv(op::SymOperation, ops::AbstractVector{SymOperation{D}}, cntr::Char) \n                                            --> Tuple{Int, Vector{Float64}}\n\nSearch for an operator op′ in ops which is equivalent, modulo differences by primitive lattice translations Δw, to op. Return the index of op′ in  ops, as well as the primitive translation difference Δw. If no match is found returns (nothing, nothing).\n\nThe small irreps of op at wavevector k, Dⱼᵏ[op], can be computed from  the small irreps of op′, Dⱼᵏ[op′], via Dⱼᵏ[op] = exp(2πik⋅Δw)Dⱼᵏ[op′]\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.fractionify!","page":"API","title":"Crystalline.fractionify!","text":"fractionify!(io::IO, x::Real, forcesign::Bool=true, tol::Real=1e-4)\n\nWrite a string representation of the nearest fraction (within a tolerance tol) of x to  io. If forcesign is true, the sign character of x is printed whether + or -  (otherwise, only printed if -).\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.freeparams-Tuple{Crystalline.AbstractVec}","page":"API","title":"Crystalline.freeparams","text":"freeparams(v)\n\n\nReturn a vector whose entries are true (false) if the free parameters α,β,γ,  respectively, occur with nonzero (zero) coefficients in v.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.is_compatible_kvec-Tuple{KVec,KVec}","page":"API","title":"Crystalline.is_compatible_kvec","text":"is_compatible_kvec(kv, kv′)\n\n\nCheck whether a special k-point kv is compatible with a non-special k-point kv′. If so, return an αβγ′ value such that kv = kv′(αβγ′).\n\nTODO: This method should eventually be merged with the equivalently named method in       PhotonicBandConnectivity/src/connectivity.jl, which handles everything more correctly,       but currently has a slightly incompatible API.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.isapproxin-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API","title":"Crystalline.isapproxin","text":"isapproxin(x, itr) --> Bool\n\nDetermine whether x ∈ itr with approximate equality.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.lattice_from_mpbparams-Tuple{IO}","page":"API","title":"Crystalline.lattice_from_mpbparams","text":"lattice_from_mpbparams(filepath::String)\n\nThis will load an input file with path filepath that was previously created by prepare_mpbcalc(!) and return the associated lattice as Julia objects.\n\nOutput:\n\n    Rs::DirectBasis,\n    flat::ModulatedFourierLattice,\n    isoval::Float64,\n    epsin::Float64,\n    epsout::Float64\n    kvecs::Vector{SVector{D, Float64}}\n\nNote that flat does not retain information about orbit groupings, since we flatten the  orbits into a single vector in lattice2mpb. This doesn't matter as we typically just want to plot the saved lattice (see plot_lattice_from_mpbparams from compat/pyplot.jl).\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.matching_littlegroups-Tuple{BandRepSet}","page":"API","title":"Crystalline.matching_littlegroups","text":"matching_littlegroups(BRS::BandRepSet)\n\nFinds the matching little groups for each k-point referenced in BRS. This is mainly a  a convenience accessor, since e.g. littlegroup(::SpaceGroup, ::KVec) could already give the required little groups. The benefit here is that the resulting operator sorting of the returned little group is identical ISOTROPY's, so we can rely on that later on.\n\nReturns a Vector{<:LittleGroup} with ordering identical to that of the k-point labels in  BRS. Note that this is different from the return type of get_littlegroups which returns an unordered Dict.\n\nNote 1\n\nThe little groups from ISOTROPY do not include copies of operators that would be identical when transformed to a primitive basis. The operators are, however, still given in a conventional basis.\n\nNote 2\n\nAn error is thrown if a referenced little group cannot be found (currently, this can happen for certain k-points in Φ-Ω, see src/specialrepresentationdomain_kpoints.jl)\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.nfreeparams-Tuple{Crystalline.AbstractVec}","page":"API","title":"Crystalline.nfreeparams","text":"nfreeparams(v)\n\n\nReturn total number of free parameters occuring in v.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.parsefraction-Tuple{AbstractString}","page":"API","title":"Crystalline.parsefraction","text":"parsefraction(str::AbstractString)\n\nParse a string str, allowing fraction inputs (e.g. \"1/2\"), return as Float64.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.primitivebasismatrix","page":"API","title":"Crystalline.primitivebasismatrix","text":"primitivebasismatrix(cntr::Char, D::Integer) -> ::Matrix{Float64}\n\nGiven a centering type cntr and a dimensionality D, calculates a  transformation matrix P from a conventional to a primitive unit cell, using dictionary lookup.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.read_sgops_xyzt","page":"API","title":"Crystalline.read_sgops_xyzt","text":"read_sgops_xyzt(sgnum::Integer, dim::Integer=3)\n\nObtains the symmetry operations in xyzt format for a given space group number sgnum by reading from json files; see spacegroup for additional details. Much faster than crawling; generally preferred.\n\n\n\n\n\n","category":"function"},{"location":"api/#Crystalline.relrand-Tuple{Tuple{var\"#s129\",var\"#s129\"} where var\"#s129\"<:Real}","page":"API","title":"Crystalline.relrand","text":"relrand(lims::NTuple{2,Real}, N=1) --> Vector{Float64}\n\nComputes a random number in the range specified by the two-element  tuple lims. The random numbers are sampled from two uniform  distributions, namely [lims[1], 1] and [1, lims[2]], in such a way as to ensure that the sampling is uniform over the joint   interval [-1/lims[1], -1] ∪ [1, lims[2]].\n\nThis is useful for ensuring an even sampling of numbers that are either smaller or larger than unity. Eg. for x = relrand((0.2,5.0)), x is equally probable to fall in inv(x)∈[1,5] or x∈[1,5].\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.rotation_order-Tuple{AbstractArray{var\"#s58\",2} where var\"#s58\"<:Real}","page":"API","title":"Crystalline.rotation_order","text":"rotation_order(W::Matrix{<:Real}) --> Int\nrotation_order(op::SymOperation)  --> Int\n\nDetermine the integer rotation order of a point group operation, input either as a matrix W or op::SymOperation.\n\nThe rotation order of\n\nProper rotations is positive.\nImproper (mirrors, inversion, roto-inversions) is negative.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.rotation_order_3d-Tuple{Real,Real}","page":"API","title":"Crystalline.rotation_order_3d","text":"rotation_order_3d(detW::Real, trW::Real) --> Int\n\nDetermine the integer rotation order of a 3D point group operation with a 3×3 matrix  representation W (alternatively specified by its determinant detW and its trace trW).\n\nThe rotation order of\n\nProper rotations is positive.\nImproper (mirrors, inversion, roto-inversions) is negative.\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.uniquetol-Union{Tuple{AbstractArray{T,N} where N}, Tuple{T}} where T","page":"API","title":"Crystalline.uniquetol","text":"uniquetol(a; kwargs)\n\nComputes approximate-equality unique with tolerance specifiable via keyword arguments kwargs in O(n²) runtime.\n\nCopied from https://github.com/JuliaLang/julia/issues/19147#issuecomment-256981994\n\n\n\n\n\n","category":"method"},{"location":"api/#Crystalline.wyckbasis-Tuple{BandRepSet}","page":"API","title":"Crystalline.wyckbasis","text":"wyckbasis(BRS::BandRepSet) --> Vector{Vector{Int64}}\n\nComputes the (band representation) basis for bands generated by localized orbitals placed at the Wyckoff positions. Any band representation that can be expanded on this basis with positive integer coefficients correspond to a trivial insulators (i.e. deformable to atomic limit). Conversely, bands that cannot are topological, either fragily (some negative coefficients) or strongly (fractional coefficients).\n\n\n\n\n\n","category":"method"},{"location":"#Crystalline.jl","page":"Home","title":"Crystalline.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for Crystalline.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"api.md\",]","category":"page"}]
}
