module SGOpsHilbertBases

using SGOps, PyCall, SmithNormalForm, Test, JuMP, GLPK
import Base: OneTo
export compatibility_bases, nontopological_bases, split_fragiletrivial_bases

# All band structures can be written as ùêß = Bùê© with p·µ¢‚àà‚Ñö and n·µ¢‚ààùêç, and B a matrix whose 
# columns are EBRs. We can decompose B to a Smith normal form B = SŒõT, such that all 
# allowable band structures can be written as ùêß = Sùê≥. Here, S is an integer matrix with 
# elements S·µ¢‚±º‚àà‚Ñ§. To make n·µ¢ integer, we thus require z·µ¢‚àà‚Ñ§.

const PyNormaliz = pyimport("PyNormaliz") # Import the PyNormaliz library

"""
    compatibility_bases(F::SmithNormalForm.Smith; kwargs)
    compatibility_bases(sgnum::Integer; kwargs...)

Computes the Hilbert bases associated with a Smith normal form `F` of the EBR matrix or from
a space group number `sgnum`, which respects all compatibility relations. The resulting 
bases form a non-negative integer coefficient basis for all possible band structures.

If the method is called with `sgnum::Integer`, the associated `BandRepSet` is also returned.

Several keyword arguments `kwargs` are possible:

    - `algorithm::String`: controls the algorithm used by Normaliz to compute the Hilbert
    basis. Choices are `"DualMode"` (default) and `"PrimalMode"`
    - `spinful::Bool`: Use single- (`false`, default) or double-valued (`true`) irreps.
    - `timereversal::Bool`: Assume presence (`true`, default) or absence (`false`) of
    time-reversal symmetry.
"""
function compatibility_bases(F::SmithNormalForm.Smith; algorithm::String="DualMode")
    # To restrict n·µ¢ to only positive integers, i.e. ‚Ñï, the values of z·µ¢ must be such that 
    # ‚àë‚±º S·µ¢‚±ºz‚±º ‚â• 0. This defines a set of inequalities, which in turn defines a polyhedral
    # integer cone. This is where (Py)Normaliz comes in.
    d·µáÀ¢ = count(!iszero, F.SNF)           # "Dimensionality" of band structure
    S = @view F.S[:,OneTo(d·µáÀ¢)]           # All the nontrivial conditions on z‚±º

    C = PyNormaliz.Cone(inequalities = S) # Construct cone consistent with S·µ¢‚±ºz‚±º ‚â• 0
    C.Compute("HilbertBasis", algorithm)  # Compute¬π the Hilbert basis
    zs·¥¥  = transpose(C.HilbertBasis())    # Columns are Hilbert basis vectors in ùê≥-space

    ns·¥¥  = S*zs·¥¥                          # Columns are Hilbert basis vectors in ùêß-space

    return ns·¥¥, zs·¥¥ # Bases of all valid symmetry vectors in ùêß- and ùê≤-space
end

"""
    nontopological_bases(F::SmithNormalForm.Smith; kwargs...)
    nontopological_bases(sgnum::Integer; kwargs...)

Computes the "non-topological" Hilbert bases associated with a Smith normal form `F` of the
EBR matrix or from a space group number `sgnum`, which forms a non-negative, integer span of
all non-topological band structures (i.e. both trivial and fragile-topological).

If the method is called with `sgnum::Integer`, the associated `BandRepSet` is also returned.

For possible keyword arguments `kwargs`, see `compatibility_bases(..)`.
"""
function nontopological_bases(F::SmithNormalForm.Smith; algorithm::String="DualMode")
    # To find _all_ nontopological bases we build a cone subject to the inequalities 
    # (SŒõy)·µ¢ ‚â• 0 with y·µ¢ ‚àà ‚Ñ§, which automatically excludes topological cases (since they
    # correspond to rational y·µ¢)
    d·µáÀ¢ = count(!iszero, F.SNF)  # "Dimensionality" of band structure
    S = @view F.S[:,OneTo(d·µáÀ¢)]  # All the nontrivial conditions on z‚±º
    Œõ = @view F.SNF[OneTo(d·µáÀ¢)]  # Nonzero invariant factors of Smith normal decomposition
    SŒõ = S .* Œõ' # Equivalent to S*diagm(d·µáÀ¢, d·µáÀ¢, Œõ); all the nontrivial conditions on y·µ¢
    
    C_nontopo = PyNormaliz.Cone(inequalities = SŒõ)    # Cone consistent with S·µ¢‚±ºŒõ‚±ºy‚±º ‚â• 0
    C_nontopo.Compute("HilbertBasis", algorithm)      # Compute¬π the Hilbert basis
    ys·¥¥_nontopo = transpose(C_nontopo.HilbertBasis()) # Hilbert basis vectors in ùê≤-space

    ns·¥¥_nontopo = SŒõ*ys·¥¥_nontopo                      # Hilbert basis vectors in ùêß-space

    return ns·¥¥_nontopo, ys·¥¥_nontopo # Bases of nontopological states (along columns)
end

# Convenience accessors from a space group number alone
for f in (:compatibility_bases, :nontopological_bases)
    @eval begin
        function $f(sgnum::Integer; algorithm::String="DualMode", spinful::Bool=false,
                                    timereversal::Bool=true)
            BRS = bandreps(sgnum, spinful=spinful, timereversal=timereversal)
            B   = collect(transpose(matrix(BRS, true))) # Matrix with columns of EBRs.
            F   = SGOps._smith‚Ä≤(B)                # Smith normal decomposition of B

            return $f(F, algorithm=algorithm)..., BRS
        end
    end
end

function split_fragiletrivial_bases(ns·¥¥_nontopo::AbstractMatrix, B::AbstractMatrix)
    # Every vector of ns·¥¥_nontopo that has a non-negative integer coefficient expansion in
    # EBRs, i.e. in B, represents a trivial basis element. All other elements represent 
    # fragile basis elements. We can just test whether such a solution exists through
    # constrained optimization, and then partition into trivial and fragile categories
    N·¥±·¥Æ·¥ø = size(B, 2)
    trivial_idxs = Int[]; fragile_idxs = Int[]
    for (j, ns·¥¥_nontopo ≤) in enumerate(eachcol(ns·¥¥_nontopo))
        m = Model(GLPK.Optimizer)
        @variable(m, c[1:N·¥±·¥Æ·¥ø] >= 0, Int)
        @constraint(m, B*c .== ns·¥¥_nontopo ≤)
        optimize!(m)

        # Check to see what the termination status (i.e. result) of the optimization was 
        status = termination_status(m)
        if status == MOI.OPTIMAL         # A feasible solution was found ‚áí trivial!
            push!(trivial_idxs, j)
        elseif status == MOI.INFEASIBLE  # No feasible solution exists    ‚áí fragile!
            push!(fragile_idxs, j)
        else
            throw("Unexpected termination status $status")
        end
    end
    ns·¥¥_trivial = ns·¥¥_nontopo[:, trivial_idxs]
    ns·¥¥_fragile = ns·¥¥_nontopo[:, fragile_idxs]

    return ns·¥¥_trivial, ns·¥¥_fragile
end

"""
    _test_hilbert_bases_consistency(BRS::BandRepSet, F::SmithNormalForm.Smith,
                    ns·¥¥::AbstractMatrix, ns·¥¥_nontopo::AbstractMatrix, zs·¥¥::AbstractMatrix)

Test that the obtained "non-topological" bases indeed obey some of the conditions that we
know they must. Prints a checkmark (‚úì) if succesful; throws `Test.FallbackTestSetException`
otherwise. Returns `nothing`.
"""
function _test_hilbert_bases_consistency(BRS::BandRepSet, F::SmithNormalForm.Smith,
                ns·¥¥::AbstractMatrix, ns·¥¥_nontopo::AbstractMatrix, zs·¥¥::AbstractMatrix)

    print("   ... checking consistency of non-topological bases: ")

    d·µáÀ¢        = count(!iszero, F.SNF)  # "Dimensionality" of band structure
    N·¥¥         = size(ns·¥¥, 2)           # Number of compatibility Hilbert bases
    N·¥¥_nontopo = size(ns·¥¥_nontopo, 2)   # Number of nontopological Hilbert bases

    # All zs·¥¥ that are not element divisible by Œõ ‚â° F.SNF correspond to "proper" topological
    # cases (i.e. not fragile). This is because those z ‚â° Œõy with y·µ¢‚àà‚Ñö\‚Ñ§ are topological, 
    # whereas all those with y·µ¢‚àà‚Ñ§ are either trivial or fragilely topological.
    # Note: The approach below is not valid in general: while it does find all the 
    #       non-topological elements among the Hilbert bases ns·¥¥, it does not find a full
    #       Hilbert basis for all non-topological states. The easiest way to see this is to
    #       think in terms of a "unit cell" for the Hilbert bases, and then realize that 
    #       this unit cell may be far larger, when we take a subcone of the original cone.
    Œõ = @view F.SNF[OneTo(d·µáÀ¢)] # Nonzero invariant factors of Smith normal decomposition
    nontopo_idxs_subset = findall(z·¥¥ -> all(z·¥¥Œõ·µ¢ -> mod(z·¥¥Œõ·µ¢[1], z·¥¥Œõ·µ¢[2]) == 0, zip(z·¥¥, Œõ)),
                           collect(eachcol(zs·¥¥)))
    topo_idxs_subset   = findall(i -> i ‚àâ nontopo_idxs_subset, OneTo(N·¥¥))
    ns·¥¥_nontopo_subset = @view ns·¥¥[:, nontopo_idxs_subset]
    ns·¥¥_topo_subset    = @view ns·¥¥[:, topo_idxs_subset]

    # If classification is Z‚ÇÅ, ns·¥¥ and ns·¥¥_nontopo must be equal
    if classification(BRS) == "Z‚ÇÅ"
        @test Set(eachcol(ns·¥¥)) == Set(eachcol(ns·¥¥_nontopo))
        println("‚úì (trivially)")
    else 
        # Must be a superset of the naive extraction approach
        @test Set(eachcol(ns·¥¥_nontopo_subset)) ‚äÜ Set(unique(eachcol(ns·¥¥_nontopo)))

        # Check that every basis vector in ns·¥¥_nontopo can be expanded in the compatibility 
        # basis ns·¥¥ using only non-negative integer coefficients
        if N·¥¥ < N·¥¥_nontopo # no need to test unless there are more elements in ns·¥¥_nontopo
            for (j,ns·¥¥_nontopo ≤) in enumerate(eachcol(ns·¥¥_nontopo))
                j ‚â† 1 && print(stdout, "\b"^ndigits(j-1))
                print(stdout, j)
                flush(stdout)

                m = Model(GLPK.Optimizer)
                @variable(m, c[1:N·¥¥] >= 0, Int)
                @constraint(m, ns·¥¥*c .== ns·¥¥_nontopo ≤)
                optimize!(m)

                cvals = Int.(value.(c)) # extract optimized expansion coefficients
                @test ns·¥¥*cvals == ns·¥¥_nontopo ≤
                @test all(cvals .‚â• 0)
            end
        end
        print("\b"^ndigits(N·¥¥_nontopo), "‚úì", " "^ndigits(N·¥¥_nontopo-1))
    end

    nothing
end


# Footnotes:
# ¬π‚Åæ We want to control the algorithm used to calculate the Hilbert basis in Normaliz: I've
# found that Normaliz usually picks the "PrimalMode" algorithm (not always though), despite
# the documentation stating that "DualMode" usually is better for cones defined by
# inequalities. Through tests, I've found that there is usually a speedup of order 2-10,
# if the "DualMode" algorithm is picked instead; occassionally, up to √ó100s. The speedup 
# seems to be especially large for the systems that (very) hard to solve (e.g. 131). 
# To force "DualMode", we use the method C.Compute(<quantity-to-compute>, <algorithm>), 
# which then calculates <quantity-to-compute> and stores it in C (here, "HilbertBasis");
# it can then subsequently be retrieved from C with C.HilbertBasis().

end # module