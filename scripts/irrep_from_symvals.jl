using Crystalline
import Crystalline: DEFAULT_ATOL, rotation, irdim
using LinearAlgebra #JuMP, GLPK , Nemo

if !isdefined(Main, :SymmetryBases)
    include((@__DIR__)*"/../src/SymmetryBases/SymmetryBases.jl")
end
using Main.SymmetryBases
const PyNormaliz = Main.SymmetryBases.PyNormaliz

# ------------------------------------------------------------------------------------------

function minimal_expansion_of_zero_freq_bands(sgnum::Integer; 
                                              timereversal::Bool=true, verbose::Bool=true)

    # Irreps at Œì, irrep-multiplicities of œâ=0 2T bands, and symmetry operations
    lgirs = get_lgirreps_at_Œì(sgnum, Val(3))
    timereversal && (lgirs = realify(lgirs))
    lg = group(first(lgirs))
    rotvals = map(op->(W=rotation(op); Crystalline.rotation_order_3d(det(W), tr(W))), lg)

    # 2T irreps; check if "simple treatment"/fast-path is applicable
    ms¬≤·µÄ = find_representation¬≤·µÄ(lgirs)
    has_nonmirror_improper = any(‚àà((-1, -3, -4, -6)), rotvals)
    is_regular¬≤·µÄ = all(‚â•(0), ms¬≤·µÄ)
    if !has_nonmirror_improper && is_regular¬≤·µÄ 
        # Scenario (easy case): All symvals known & regular 2T irrep

        # Simple case: if there are no non-mirror improper rotations, we can directly infer 
        # the irrep of the 2T branches. If that irrep is regular (i.e. has no negative
        # coefficients), we don't need to invoke 1L at all, and can solve for just 2T alone.
        msÀ£ = ms¬≤·µÄ
        return find_minimum_bandreps_regular2T(sgnum, lgirs, timereversal, ms¬≤·µÄ; 
                                              safetychecks=true, verbose=verbose)

    else 
        # Two possible scenarios (treat with same approach):
        #   - All symvals known & irregular 2T and regular 1L irreps
        #   - Not all symvals known; multiple irrep options
        ms¬π·¥∏ = find_representation¬π·¥∏(lgirs)
        ms   = ms¬≤·µÄ .+ ms¬π·¥∏
        @assert all(ms .== ms¬≤·µÄ .+ ms¬π·¥∏)
        @assert all(‚â•(0), ms¬π·¥∏)                        # check: 1L irrep regular (Œì‚ÇÅ)
        @assert ms == find_representation¬≤·µÄ‚Å∫¬π·¥∏(lgirs)  # ‚Üí: [2T+1L] = 2T+1L

        return find_minimum_bandreps_regular1L(sgnum, lgirs, timereversal, ms¬π·¥∏, ms;
                                               verbose=verbose)
    end
end

function find_minimum_bandreps_regular2T(sgnum, lgirs, timereversal, ms¬≤·µÄ; 
                                        verbose::Bool=true, safetychecks::Bool=false)
    verbose && println("SG ", sgnum)

    sb, Œìidxs = compatibility_bases_and_Œìidxs(sgnum, lgirs, timereversal)
    ŒΩs·¥¥ = fillings(sb)
    ŒΩ·¥¥‚Çò‚Çê‚Çì = maximum(ŒΩs·¥¥)

    # We seek an expansion with coefficients c·µ¢‚â•0 such that
    #   P(Œì) ‚àë·µ¢ c·µ¢ ùêß·¥¥·µ¢ ‚â• ùê¶(Œì)
    # where P(Œì) projects out the Œì-irreps from the Hilbert bases ùêß·¥¥·µ¢. In code, letting
    # `ns·¥¥ = matrix(sb)`, this means we seek a solution with `ns·¥¥[Œìidxs,:]*c ‚â• ms`. 
    # Finally, we impose a filling
    # constraint, such that the overall number of bands is at most ŒΩ. In code, this requires
    # that `ns·¥¥[end,:]*c == ŒΩ`. Moreover, all ùêß·¥¥·µ¢ that does not have at least one nonzero
    # entry matching `ms` will not help us in fulfilling these constraints in a nontrivial
    # way, so we can ignore those (would correspond to just stacking on some bands).
    # Finally, we can restrict the sum to contain at most two ùêß·¥¥·µ¢ (same or different): if we
    # have more, then at least one of them isn't actually needed to fulfil ``ùêß(Œì) ‚â• ùê¶(Œì)``,
    # and can then be considered a trivial stacking.

    # the "nontrivial" parts of `n·¥¥` must have at least one positive element for the same 
    # irrep as a nonzero index of `ms`; we can ignore all the others
    ntidxs¬≤·µÄ = find_symmetry_constrained_bases(sb, ms¬≤·µÄ, Œìidxs)

    c‚Å±s = Vector{Int}[]
    maxterms = 2
    for ŒΩ¬≤·µÄ·µó in 2:2ŒΩ·¥¥‚Çò‚Çê‚Çì # target filling for 2T branches (‚â•2)
        c‚Å±s = filling_symmetry_constrained_expansions(ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, ŒΩs·¥¥, sb, Œìidxs, 
                                                ntidxs¬≤·µÄ, # include only "nontrivial" bases
                                                maxterms) # limit to two basis terms

        if !isempty(c‚Å±s)
            verbose      && println("   ‚áí ŒΩ·µÄ = ", ŒΩ¬≤·µÄ·µó, ": ", length(c‚Å±s), " solutions")            
            safetychecks && safetycheck¬≤·µÄ(c‚Å±s, ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, ŒΩs·¥¥, sb, Œìidxs)
            
            return c‚Å±s, ŒΩ¬≤·µÄ·µó, sb, nothing
        end
    end
    throw("Found no valid expansions consistent with constraints")
end

function find_minimum_bandreps_regular1L(sgnum, lgirs, timereversal, ms¬π·¥∏, ms;
                    verbose=verbose)
    verbose && print("SG ", sgnum)

    sb, Œìidxs = compatibility_bases_and_Œìidxs(sgnum, lgirs, timereversal)
    N‚Å± ≥ ≥ = length(first(sb))
    notŒìidxs = [idx for idx in 1:N‚Å± ≥ ≥ if idx ‚àâ Œìidxs]
    ŒΩs·¥¥ = fillings(sb)
    ŒΩ·¥¥‚Çò·µ¢‚Çô, ŒΩ·¥¥‚Çò‚Çê‚Çì = extrema(ŒΩs·¥¥)
    
    # Here, the irrep of 1L is regular (Œì‚ÇÅ) and the irrep of 2T is irregular (i.e. has 
    # negative coefficients). As a result, it is impossible to expand 2T's irrep in the
    # Hilbert basis since it has strictly positive elements and coefficients. We can still
    # can try to find an expansion for 2T+1L simultaneously.
    ntidxs¬π·¥∏  = find_symmetry_constrained_bases(sb, ms¬π·¥∏, Œìidxs)
    _, pick¬π·¥∏ = findmin(ŒΩs·¥¥[ntidxs¬π·¥∏])
    idx¬π·¥∏   = ntidxs¬π·¥∏[pick¬π·¥∏] # TODO: Test that resulting expansions for 2T are invariant wrt. to this choice
    n·¥∏ = sb[idx¬π·¥∏]
    ŒΩ·¥∏ = ŒΩs·¥¥[idx¬π·¥∏]
    
    verbose && println(" (ŒΩ·¥¥‚Çò·µ¢‚Çô = ", ŒΩ·¥¥‚Çò·µ¢‚Çô, ", ŒΩ·¥∏ = ", ŒΩ·¥∏, ")")
    # find _all_ feasible solutions to ms constraints for fixed and minimal ŒΩ·µó; can at 
    # include any number of Hilbert bases in general - we have a fast path for less than 
    # 4 bases, and otherwise fall back to PyNormaliz
    max_patience_ŒΩ·µó = max(4*ŒΩ·¥¥‚Çò‚Çê‚Çì, 8)
    for ŒΩ·µó in 3:max_patience_ŒΩ·µó # target filling (‚â•3) (function returns from loop)
        verbose && print("   ‚Ä¶ ŒΩ·µó = ", ŒΩ·µó, ": ")

        # Find the solutions to c‚ÇÅŒΩ·¥¥‚ÇÅ + c‚ÇÇŒΩ·¥¥‚ÇÇ + ... = ŒΩ·µó subject to the 2T+1L ms constraint
        # The below basically uses recursion to do a nested set `max_terms` loops which
        # solves linear Diophantine equation and checks symmetry constraints as well; the
        # maximum number of included bases in a valid expansion is div(ŒΩ·µó, ŒΩ·¥¥‚Çò·µ¢‚Çô, RoundDown)
        c‚Å±s = filling_symmetry_constrained_expansions(ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)
        verbose && println(length(c‚Å±s), " candidates")
        
        # Proceed to check combinations of n·¥∏ and n=sum(sb[c‚Å±])
        c‚Å±s_valid = Vector{Int}[]
        n = similar(first(sb)) # candidate solution buffer     
        for c‚Å± in c‚Å±s # 2T+1L constraints
            sum_symbases!(n, sb, c‚Å±) # compute new candidate vector from c‚Å± indices
            # test 1: n(‚àâŒì)-n·¥∏(‚àâŒì) ‚â• 0
            if all(‚â•(0), @views n[notŒìidxs] .- n·¥∏[notŒìidxs])
                # test 2: [n(Œì)-n¬π·¥∏‚Å∫¬≤·µÄ‚Çö·µ¢‚Çô(Œì)] - [n·¥∏(Œì)-n¬π·¥∏‚Çö·µ¢‚Çô(Œì)] ‚â• 0
                if all(‚â•(0), (n[Œìidxs] .- ms) .- (n·¥∏[Œìidxs] .- ms¬π·¥∏)) 
                    push!(c‚Å±s_valid, c‚Å±) # found a valid solution; push to storage
                end
            end
        end

        if !isempty(c‚Å±s_valid)
            ŒΩ·µÄ = ŒΩ·µó - ŒΩ·¥∏
            verbose && println("   ‚áí ŒΩ·µÄ = ", ŒΩ·µÄ, ": ", length(c‚Å±s_valid), " solutions")
            return c‚Å±s_valid, ŒΩ·µÄ, idx¬π·¥∏, sb
        end
    end
    
    throw("Found no valid expansions consistent with constraints")
end

# -----------------------------------------------------------------------------------------
"""
    find_symmetry_constrained_bases(sb::SymBasis, ms::AbstractVector{Int},
                                    Œìidxs::AbstractVector{Int})

From a Hilbert basis, specified via `sb::SymBasis` whose elements are the Hilbert basis
vectors, find those that has at least one positive element in overlap with a set irrep 
multiplicities `ms`, whose indices in the rows of the Hilbert basis vectors are specified by
`Œìidxs`.
Returns an array of indices into the the vectors of `sb`.
"""
function find_symmetry_constrained_bases(sb::SymBasis, ms::AbstractVector{Int},
                                         Œìidxs::AbstractVector{Int})
    ntidxs·¥¥ = Int[]
    for (idx, n·¥¥) in enumerate(sb)
        if has_mutual_positive_elements((@view n·¥¥[Œìidxs]), ms)
            push!(ntidxs·¥¥, idx)
        end
    end
    return ntidxs·¥¥
end

# ‚â° any(x>0 & y>0) w/o allocations
has_mutual_positive_elements(x, y) = any(xy -> (xy[1] > 0) & (xy[2] > 0), zip(x,y))

function add_solution!(c‚Å±s::Vector{Vector{Int}}, ijks::NTuple{N, Int}) where N
    # push `ijks` to solution storage `c‚Å±s` as a vector of indices
    push!(c‚Å±s, [idx for idx in ijks])
end

function coef2idxs(c::AbstractVector{Int})
    N = sum(c)
    c‚Å± = Vector{Int}(undef, N)
    pos‚ÇÅ, pos‚ÇÇ, idx = 0, 0, 0
    while true
        idx  = findnext(‚â†(0), c, idx+1)
        pos‚ÇÅ = pos‚ÇÇ+1
        pos‚ÇÇ = pos‚ÇÇ+c[idx]
        c‚Å±[pos‚ÇÅ:pos‚ÇÇ] .= idx
        pos‚ÇÇ == N && break
    end
    return c‚Å±
end

function idxs2coef(c‚Å±, N·¥¥) # N·¥¥ = length(sb)
    c = zeros(Int, N·¥¥)
    for i in c‚Å±
        c[i] += 1
    end
    return c
end

"""
    filling_symmetry_constrained_expansions(ŒΩ·µó::Integer, ms::AbstractVector{<:Integer}, ŒΩs·¥¥,
                                            sb::SymBasis, Œìidxs, 
                                            ntidxs=eachindex(sb),
                                            maxdepth=div(ŒΩ·µó, minimum(ŒΩs·¥¥), RoundDown))

Given a compatibility basis `sb` with Hilbert bases ``[ùêß‚ÇÅ·¥¥, ùêß‚ÇÇ·¥¥, ...]`` with associated
fillings `vs·¥¥` ``= [ŒΩ‚ÇÅ·¥¥, ŒΩ‚ÇÇ·¥¥, ...]``, find all expansions `c‚Å±s` that (a) satisfy the filling
constraint (a linear Diophantine equation)

``c‚ÇÅŒΩ‚ÇÅ·¥¥ + c‚ÇÇv‚ÇÇ·¥¥ + ... =`` `ŒΩ·µó`

with non-negative, integer coefficients {c·µ¢‚àà‚Ñï} and (b) satisfy the symmetry constraint

``(ùêß = c‚ÇÅùêß‚ÇÅ·¥¥ + c‚ÇÇùêß‚ÇÇ·¥¥ + ...)(Œì) ‚â•`` `ms`

evaluated only at the Œì-point, whose indices into the ``ùêß·µ¢·¥¥`` vector are specified by
`Œìidxs`.

Optionally, if the caller wants to restrict the expansion to a subset of the bases in `sb`,
the argument `ntidxs` can provide an indexing into allowable bases of `sb`.

# Implementation
Recursion is used to build a nested set of for loops, of depth `maxdepth`, corresponding 
to the inclusion of at most `maxdepth` Hilbert bases (this limits the maximum meaningful 
value of `maxdepth` to `div(ŒΩ·µó, minimum(ŒΩs·¥¥), RoundDown)`; its default value). 

# Note
See also the `*_loop` and `*_normaliz` legacy methds that achieve the same goal by different
means. They are retained in the codebase, despite being less capable or much slower, 
respectively, in the belief that they might more clearly illustrate the approach.
"""
function filling_symmetry_constrained_expansions(ŒΩ·µó::Integer, ms::AbstractVector{<:Integer},
                                        ŒΩs·¥¥, sb::SymBasis, Œìidxs,
                                        ntidxs=eachindex(sb),
                                        maxdepth::Integer=div(ŒΩ·µó, minimum(ŒΩs·¥¥), RoundDown))

    ŒΩ·µó > 0 || throw(DomainError(ŒΩ·µó, "must be positive"))

    c‚Å±s = Vector{Int}[] # solution vector storage
    ms‚Ä≤ = similar(ms)   # buffer
    _filling_symmetry_constrained_expansions!(c‚Å±s, ms‚Ä≤, (), ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs, 
                                              1, length(ntidxs), 1, maxdepth, ntidxs)
end
function _filling_symmetry_constrained_expansions!(c‚Å±s, ms‚Ä≤, ijks, ŒΩ·µó, ms, ŒΩs·¥¥, 
                sb::SymBasis, Œìidxs, startidx, stopidx, depth, maxdepth, ntidxs)
    depth > maxdepth && return c‚Å±s
    for idx·µ¢ in startidx:stopidx
        i = ntidxs[idx·µ¢]
        ŒΩ = test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, (ijks...,i), ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)
        ŒΩ ‚â• ŒΩ·µó && continue # matched/overflowed ŒΩ·µó constraint; nothing more to add

        # did not yet match/overflow filling constraint: add more Hilbert basis vectors
        _filling_symmetry_constrained_expansions!(c‚Å±s, ms‚Ä≤, (ijks...,i), ŒΩ·µó, ms, 
                ŒΩs·¥¥, sb, Œìidxs, idx·µ¢, stopidx, depth+1, maxdepth, ntidxs)
    end
    return c‚Å±s
end

function test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, # push to c‚Å±s; use ms‚Ä≤ as an updating buffer
                                      ijks::NTuple{N,Int}, ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs) where N

    ŒΩ = _sum_fillings(ijks, ŒΩs·¥¥)                   # accumulate band fillings
    ŒΩ ‚â† ŒΩ·µó && return ŒΩ                             # return early if ŒΩ overflows ŒΩ·µó
    _update_symmetry_constraints!(ms‚Ä≤, ijks, ms, sb, Œìidxs) # update Œì-constraints in ms‚Ä≤

    # check if n·¥¥·µ¢+n·¥¥‚±º+n·¥¥‚Çñ+... fulfil symmetry constraints from `ms`
    if all(‚â§(0), ms‚Ä≤) # check if n·¥¥·µ¢+n·¥¥‚±º+n·¥¥‚Çñ+... fulfill `ms` constraints
        add_solution!(c‚Å±s, ijks) # push a solution "i+j+k+..." to storage `c‚Å±s`
    end

    return ŒΩ # return filling associated with `ijks` expansion
end

# equivalent of ŒΩ = ŒΩs·¥¥[i] + ŒΩs·¥¥[j] + ŒΩs·¥¥[k] + ... for i,j,k, in ijks, recursively
_sum_fillings(ijks::NTuple{1,Int}, ŒΩs·¥¥) = ŒΩs·¥¥[first(ijks)]
function _sum_fillings(ijks::NTuple{N,Int}, ŒΩs·¥¥) where N
    ŒΩs·¥¥[first(ijks)] + _sum_fillings(Base.tail(ijks), ŒΩs·¥¥)
end

# update Œì-constraints, assigning to ms‚Ä≤
@inline function _update_symmetry_constraints!(ms‚Ä≤, ijks::NTuple{N,Int}, ms, sb::SymBasis, Œìidxs) where N
    if N == 1
        i, = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs]
    elseif N == 2
        i,j = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs] .- sb[j][Œìidxs]
    elseif N == 3
        i,j,k = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs] .- sb[j][Œìidxs] .- sb[k][Œìidxs]
    elseif N == 4
        i,j,k,l = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs] .- sb[j][Œìidxs] .- sb[k][Œìidxs] .- sb[l][Œìidxs]
    else # fall back to looping
        ms‚Ä≤ .= ms
        for ijk in ijks 
            @views ms‚Ä≤ .-= sb[ijk][Œìidxs]
        end
    end
    return ms‚Ä≤
end

# we bother to optimize this, as it can be a bottleneck; much faster than a naive 
# implementation like `sum(sb[idxs])`
function sum_symbases!(n, sb::SymBasis, idxs)
    N‚Å± ≥ ≥ = length(n)
    n .= sb[first(idxs)] # peel off 1st iter & ensure invariance to n's inititialization
    @inbounds for idx in @view idxs[2:end]
        n·¥¥ = sb[idx]
        for i in 1:N‚Å± ≥ ≥
            n[i] += n·¥¥[i]
        end
    end
    return n
end
sum_symbases(sb::SymBasis, idxs) = sum_symbases!(similar(first(sb)), sb, idxs)

# -----------------------------------------------------------------------------------------

"""
    filling_symmetry_constrained_expansions_loop(ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)

Legacy method: see `filling_symmetry_constrained_expansions`. 

Limited to expansions of at most 4 Hilbert bases elements.
"""
function filling_symmetry_constrained_expansions_loop(ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)
    args = (ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)
    c‚Å±s = Vector{Int}[] # solution vector storage
    ms‚Ä≤ = similar(ms)   # buffer
    for i in eachindex(sb)
        ŒΩ = test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, (i,), args...)
        ŒΩ ‚â• ŒΩ·µó && continue # if ŒΩ already meets or overflows ŒΩ·µó we cannot add more
        for j in i:length(sb)
            ŒΩ = test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, (i,j), args...)
            ŒΩ ‚â• ŒΩ·µó && continue
            for k in j:length(sb)
                ŒΩ = test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, (i,j,k), args...)
                ŒΩ ‚â• ŒΩ·µó && continue
                for l in k:length(sb)
                    test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, (i,j,k,l), args...)
                end
            end
        end
    end
    return c‚Å±s
end

"""
    filling_symmetry_constrained_expansions_normaliz(ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)

Legacy method: see `filling_symmetry_constrained_expansions`. 
Uses Normaliz to solve the linear Diophantine equation that defines the filling constraint.

Is at least about 20-250√ó slower than the recursive and looping implementations; sometimes
much slower. The surface implementation, however, is considerably simpler.
"""
function filling_symmetry_constrained_expansions_normaliz(ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)
    c‚Å±s = Vector{Int}[]
    # all possible solutions to the filling constraint
    c‚Å±s_ŒΩ·µó = filling_constrained_expansions(ŒΩs·¥¥, ŒΩ·µó, verbose=false)
    n = similar(first(sb))
    for c‚Å± in c‚Å±s_ŒΩ·µó
        sum_symbases!(n, sb, c‚Å±) # set n = ns·¥¥_Œì*c
        if all((@view n[Œìidxs]) .‚â• ms)
            push!(c‚Å±s, c‚Å±)
        end
    end

    return c‚Å±s
end

# -----------------------------------------------------------------------------------------

function compatibility_bases_and_Œìidxs(sgnum, lgirs, timereversal)
    # Find the Hilbert basis that respects the compatibility relations
    sb, _, BRS = compatibility_bases(sgnum, spinful=false, timereversal=timereversal)
    ns·¥¥ = matrix(sb)
    # Find the indices of the Œì irreps in `BRS::BandRepSet` (and hence in `ns·¥¥`), and how  
    # they map to the corresponding irrep indices in `lgirs`
    irlabs_brs = irreplabels(BRS)
    irlabs_lgirs = Crystalline.formatirreplabel.(label.(lgirs))
    Œìidxs = map(irlab->findfirst(==(irlab), irlabs_brs), irlabs_lgirs)

    return sb, Œìidxs
end

function safetycheck¬≤·µÄ(c‚Å±s, ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, ŒΩs·¥¥, sb, Œìidxs)
    # check that all solutions are valid and unique
    all(c‚Å±->isvalid_solution(c‚Å±, ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, sb, Œìidxs), c‚Å±s) || throw("Found invalid solutions")
    allunique(c‚Å±s) || throw("Found repeated solutions, unexpectedly")

    # Check that it didn't matter whether we excluded "trivial" basis elements or not
    c‚Å±s‚Ä≤ = filling_symmetry_constrained_expansions(ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, ŒΩs·¥¥, sb, Œìidxs)
    Set(c‚Å±s) ‚â† Set(c‚Å±s‚Ä≤) && throw("Did not obtain equivalent solution sets")
end             

function isvalid_solution(c‚Å±::Vector{Int}, ŒΩ·µó::Int, ms::Vector{Int}, sb::SymBasis, Œìidxs)
    n = sum_symbases(sb, c‚Å±)
    return all(n[Œìidxs] .‚â• ms) && n[end] == ŒΩ·µó
end

"""
    filling_constrained_expansions(ŒΩs·¥¥::AbstractVector{<:Int}, ŒΩ·µó::Int)

Find all non-negative integer solutions ``{c·µ¢}`` to the linear Diophantine equation

``c‚ÇÅŒΩ‚ÇÅ·¥¥ + c‚ÇÇv‚ÇÇ·¥¥ + ... =`` `ŒΩ·µó`

with `ŒΩs·¥¥` ``= [ŒΩ‚ÇÅ·¥¥, ŒΩ‚ÇÇ·¥¥, ...]`` denoting the fillings associated with a Hilbert basis.

Solutions are returned as a `::Vector{Vector{Int}}`. Uses PyNormaliz to solve the integral
polytope defined by the above inhomogeneous equation.

Optionally prints number of solutions, if the kwarg `verbose::Bool=false` is set to `true`.
"""
function filling_constrained_expansions(ŒΩs·¥¥::AbstractVector{Int}, ŒΩ·µó::Int; 
                                        verbose::Bool=false)

    ŒΩ·µó > 0 || throw(DomainError(ŒΩ·µó, "must be positive"))
    
    # We want to avoid including terms where ŒΩ·µ¢·¥¥ > v·µó since they cannot feature in a valid
    # solution anyway and actually end up slowing down the calculation significantly
    nt_idxs = findall(‚â§(ŒΩ·µó), ŒΩs·¥¥)
    # Specify linear Diophantine equation via PyNormaliz's Cone constructor
    inhom_eqs = reshape([@view ŒΩs·¥¥[nt_idxs]; -ŒΩ·µó], 1, length(nt_idxs)+1)
    #inhom_eqs = reshape([ŒΩs·¥¥; -ŒΩ·µó], 1, length(ŒΩs·¥¥)+1)
    P = PyNormaliz.Cone(inhom_equations = inhom_eqs)
    # Find non-negative integer solutions to the above integral polytope
    normaliz_sols = P.LatticePoints() # distinct solutions across rows

    # last column of `normaliz_sols` is a multiplier on ``-ŒΩ·µó``: should be 1, otherwise it 
    # corresponds to finding a solution that has a filling equal to a multiple of ŒΩ·µó. We 
    # filter out these solutions below.
    #c‚Å±s = [coef2idxs(c‚Ä≤[1:end-1]) for c‚Ä≤ in eachrow(normaliz_sols) if isone(c‚Ä≤[end])]
    c‚Å±s = [nt_idxs[coef2idxs(c‚Ä≤[1:end-1])] for c‚Ä≤ in eachrow(normaliz_sols) if isone(c‚Ä≤[end])]
    
    if verbose 
        println("   ŒΩ·µó = ", ŒΩ·µó, ": ", length(c‚Å±s), " ŒΩ·µó-constrained candidate solutions = ")
        if length(c‚Å±s) ‚â† size(normaliz_sols, 1) 
            println("      DISCARDED \"MULTIPLES\"-SOLUTIONS W/ MULTIPLICITY = ",
                    filter(‚â†(1), unique(normaliz_sols[:,end])))
        end
    end

    return c‚Å±s
end

# ------------------------------------------------------------------------------------------
function get_lgirreps_at_Œì(sgnum::Integer, D·µõ::Val=Val(3)) # small irreps at Œì
   lgirs = first(get_lgirreps(sgnum,  D·µõ))
   kv = kvec(first(lgirs))
   @assert all(iszero, kv.k‚ÇÄ) && isspecial(kv) # Make sure that lgirs indeed is sampled at Œì

   return lgirs
end

# irrep-expansions/representation at Œì for the transverse (2T), longitudinal (1L), and triad
# (2T+1L) plane wave branches that touch œâ=0 at Œì
"""
    find_representation¬≤·µÄ‚Å∫¬π·¥∏(lgirs::AbstractVector{LGIrrep{3}})
    find_representation¬≤·µÄ‚Å∫¬π·¥∏(sgnum::Integer; timereversal::Bool=false)
"""
function find_representation¬≤·µÄ‚Å∫¬π·¥∏ end
"""
    find_representation¬π·¥∏(lgirs::AbstractVector{LGIrrep{3}})
    find_representation¬π·¥∏(sgnum::Integer; timereversal::Bool=false)
"""
function find_representation¬π·¥∏    end
"""
    find_representation¬≤·µÄ(lgirs::AbstractVector{LGIrrep{3}})
    find_representation¬≤·µÄ(sgnum::Integer; timereversal::Bool=false)
"""
function find_representation¬≤·µÄ    end

for postfix in ("¬≤·µÄ‚Å∫¬π·¥∏", "¬π·¥∏", "¬≤·µÄ")
    f = Symbol("find_representation"*postfix) # method to be defined
    symvals_fun = Symbol("get_symvals"*postfix)

    # "root" accessors via lgirs
    @eval function $f(lgirs::AbstractVector{LGIrrep{3}})
        lg = group(first(lgirs))
        symvals = $symvals_fun(lg)

        return find_representation(symvals, lgirs)
    end

    # convenience accessors via 
    @eval function $f(sgnum::Integer; timereversal::Bool=false)
        lgirs = get_lgirreps_at_Œì(sgnum, Val(3))
        timereversal && (lgirs = realify(lgirs))

        return $f(lgirs)
    end
end

# ------------------------------------------------------------------------------------------
# (sum of) symmetry eigenvalues of œâ=0 branches

# two transverse and two longitudinal plane waves (2T+1L)
function get_symvals¬≤·µÄ‚Å∫¬π·¥∏(ops::AbstractVector{SymOperation{3}})
    symvals = Vector{ComplexF64}(undef, length(ops))
    for (i, op) in enumerate(ops)
        W = rotation(op)
        rotval = Crystalline.rotation_order_3d(W)
        n = abs(rotval)
        # This covers every case, including rotations, mirrors, rotoinversions, & inversion
        Œ∏ = 2œÄ/n
        symvals[i] = sign(rotval)* (cis(Œ∏) + cis(-Œ∏) + one(ComplexF64))
    end
    
    return symvals
end

# single longitudinal plane wave (1L)
function get_symvals¬π·¥∏(ops::AbstractVector{SymOperation{3}})
    symvals = ones(ComplexF64, length(ops)) 
end

# two transverse plane waves (2T)
function get_symvals¬≤·µÄ(ops::AbstractVector{SymOperation{3}})
    symvals = Vector{ComplexF64}(undef, length(ops))

    for (i, op) in enumerate(ops)
        W = rotation(op)
        rotval = Crystalline.rotation_order_3d(W)
        
        n = abs(rotval) # rotation order 

        if !signbit(rotval)                                     # ‚Üê Proper rotation
            # The symmetry eigenvalues are those of of the 2√ó2 rotation matrix R(Œ∏) ‚â° 
            # [c s; c -s] with c ‚â° cos(Œ∏), s ‚â° sin(Œ∏), and Œ∏ ‚â° 2œÄ/n, i.e. e‚Å∫‚Å±·∂ø and e‚Åª‚Å±·∂ø
            Œ∏ = 2œÄ/n
            symvals[i] = 2cos(Œ∏) # e‚Å±·∂ø + e‚Åª‚Å±·∂ø = 2cos(Œ∏)

        else                                                    # ‚Üê Improper rotation
            # It is not generally possible to infer the all the symmetry eigenvalues of 
            # roto-inversions with rotval = (-1, -3, -4, -6) for the two transverse 
            # plane waves (2T) in isolation. This is because there are there no lines of
            # symmetry from Œì along which 2T could be symmetry-allowed eigenfunctions 
            # for the rotoinversions.
            # Instead, we pick a _possible_ choice for 1L and infer _possible_ symmetry
            # values from [2T+1L] - 1L

            # It _is_ possible for a simple mirror though (i.e., rotation followed by
            # inversion, i.e. -2 === m): the right choice is to pick the symmetry
            # eigenvalues as +1 and -1 (again, assuming two transverse plane waves along
            # each high-symmetry k-vector)
            if rotval == -2                     # ‚Üê Mirror
                symvals[i] = zero(ComplexF64) # (+1) + (-1)

            elseif rotval ‚àà (-1, -3, -4, -6)    # ‚Üê Roto-inversions & inversion
                Œ∏ = 2œÄ/n
                # In general, we have: 
                #   [2T+1L] - 1L = [(-e‚Å±·∂ø) + (-e‚Åª‚Å±·∂ø) + (-1)] - (+1) = -2cos(Œ∏) - 2.0
                # For inversion specifically, this is:
                #   [2T+1L] - 1L = [(-1) + (-1) + (-1)] - (+1) = -4
                symvals[i] = -2cos(Œ∏) - 2.0 
                # SGs w/ non-mirror rotoinversions are 81:88, 111:142, 147:148, 162:167, 
                # 174:176, 187:194, 200:206, and 215:230
            end
        end
    end

    return symvals
end

# convenience accessors via space/little groups, ensuring primitive basis
for f in (:get_symvals¬≤·µÄ‚Å∫¬π·¥∏, :get_symvals¬π·¥∏, :get_symvals¬≤·µÄ)
    @eval $f(sg::Union{LittleGroup{3}, SpaceGroup{3}}) = $f(operations(primitivize(sg)))
end

# ------------------------------------------------------------------------------------------

if false
    ŒΩs = getindex.(minimal_expansion_of_zero_freq_bands.(1:230, timereversal=true, verbose=false),
                   2)

    # Compare with Watanabe & Lu
    Base.ndigits(::Nothing) = 1 # haaaack
    include("scripts/watanabelu_results.jl") # loads Watanabe & Lu data (in `Ms·µÇ·¥∏`)
    Q = [[sg, M, Mbound] for (sg, M, Mbound) ‚àà zip(1:230, ŒΩs, getindex.(Ms·µÇ·¥∏, 2))]
    Q‚Ä≤ = filter(x-> x[2]!==nothing, Q) # filter out those sgs that are not currently implemented (i.e. allow only regular 2T)
    issues = map(x->x[2]===nothing ? "‚îÄ" : (x[2]‚â•(x[3]) ? " " : "!"), Q)
    differences = map(x->x[2]===nothing ? "‚îÄ" : (x[2]==(x[3]) ? " " : "‚â†"), Q)

    foreach(vcat.(Q, issues, differences)) do x
        println("|", " "^(4-ndigits(x[1])), x[1], " |", " "^(3-ndigits(x[2])),  # SG no.
                x[2] === nothing ? "‚îÄ" : x[2], " | ",  # our M predictions
                x[3] == 2 ? "=" : "‚â•", x[3], " | ",    # M-bounds from Watanabe & Lu
                x[4], " | ",                           # bound violations
                x[5], " |"                             # differences from bound?
        )
    end
end